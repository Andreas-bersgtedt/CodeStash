{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "demoworkspace001"
		},
		"Metadataengine_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Metadataengine'"
		},
		"MySQLServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySQLServer'"
		},
		"OracleGeneric_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OracleGeneric'"
		},
		"SQLServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQLServer'"
		},
		"demoworkspace001-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'demoworkspace001-WorkspaceDefaultSqlServer'"
		},
		"piraeusdemo01-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'piraeusdemo01-WorkspaceDefaultSqlServer'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mekeyvault001.vault.azure.net/"
		},
		"MetadataLake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://demostarageaccount001.dfs.core.windows.net"
		},
		"demoworkspace001-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://demostarageaccount001.dfs.core.windows.net"
		},
		"piraeusdemo01-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://piraeusdemosa.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/BuildSalesModel')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "DimCustomer",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProcessDimCustomer",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"salesltcustomer": {},
									"DimCustomerlkup": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DimProduct",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProcessDimProduct",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Product": {},
									"ProductCategory": {},
									"DimProductLkup": {},
									"ProductModel": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "FactSales",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "DimCustomer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DimProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ProcessFactSales",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderHeader": {},
									"OrderLines": {},
									"fktSaleslkup": {},
									"FactSales": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ModelProcessing"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/ProcessDimCustomer')]",
				"[concat(variables('workspaceId'), '/dataflows/ProcessDimProduct')]",
				"[concat(variables('workspaceId'), '/dataflows/ProcessFactSales')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CreatePurviewADLSGen2DataSource')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Call Purview API",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": {
								"value": "@concat(\n'https://',\npipeline().parameters.P_PurviewAccountName,\n'.purview.azure.com/scan',\n'/datasources/',\npipeline().parameters.P_SourceName,\n'?api-version=2018-12-01-preview'\n)",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "PUT",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"value": "@concat(\n'{ \"kind\": \"AdlsGen2\",',\n'  \"properties\": {',\n'    \"endpoint\": \"', pipeline().parameters.P_ADLSEndpoint,'\",',\n'    \"collection\": {',\n'      \"referenceName\": \"', pipeline().parameters.P_PurviewCollectionName,'\",',\n'      \"type\": \"CollectionReference\"',\n'    }',\n'  }',\n'}'\n)",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://purview.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"P_PurviewAccountName": {
						"type": "string",
						"defaultValue": "LS-GBBPurviewAcct"
					},
					"P_SourceName": {
						"type": "string",
						"defaultValue": "MyNewSource"
					},
					"P_ADLSEndpoint": {
						"type": "string",
						"defaultValue": "https://externaltestaccount.dfs.core.windows.net/"
					},
					"P_PurviewCollectionName": {
						"type": "string",
						"defaultValue": "LS-GBBPurviewAcct"
					}
				},
				"folder": {
					"name": "Purview"
				},
				"annotations": [],
				"lastPublishTime": "2022-03-04T16:15:31Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Daily Retail Model Process')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "Ingest Sales Data to RAW",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "IngestMSSQLDataToRaw",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DataSetType": "mssql",
								"RunGroupCode": "999"
							}
						}
					},
					{
						"name": "Process CUrated Zone",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Ingest Sales Data to RAW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "ProcessCurated",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Maxpart": 3,
								"Part": -999
							}
						}
					},
					{
						"name": "Process Sales Model",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Process CUrated Zone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BuildSalesModel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/IngestMSSQLDataToRaw')]",
				"[concat(variables('workspaceId'), '/pipelines/ProcessCurated')]",
				"[concat(variables('workspaceId'), '/pipelines/BuildSalesModel')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DynamicSQLDBtoRAWMetadata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "GetConfigurations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "[ME_Config].[sp_ADFGetDynamicRDBMSQuery]",
								"storedProcedureParameters": {
									"DataSetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.DataSetType",
											"type": "Expression"
										}
									},
									"RunGroupCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.RunGroupCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "me_config_dw",
								"type": "DatasetReference",
								"parameters": {
									"WorkspaceName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE_Execute_SQL_Pipeline",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetConfigurations",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Delete Processed Files_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetConfigurations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{item().DataSetType}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "MSSQL",
												"activities": [
													{
														"name": "Execute Generic MSSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "MYSQL",
												"activities": [
													{
														"name": "Execute Generic MySQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "MYSQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "AzMYSQL",
												"activities": [
													{
														"name": "Execute Generic AzMYSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "MYSQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "mysql",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "ORACLE",
												"activities": [
													{
														"name": "Execute Generic ORACLE Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "ORACLEtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"OracleServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"OraclelDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"OracleKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"OracleUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"OracleQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Stage Metadata",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "FE_Execute_SQL_Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "inbound",
									"wildcardFileName": "*.parquet",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "SqlDWSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MetadataQuerySource",
											"type": "String"
										},
										"sink": {
											"name": "MetadataQuerySource",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataEntityName",
											"type": "String"
										},
										"sink": {
											"name": "MetadataEntityName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataSchemaName",
											"type": "String"
										},
										"sink": {
											"name": "MetadataSchemaName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectName",
											"type": "String"
										},
										"sink": {
											"name": "MetadataObjectName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectType",
											"type": "String"
										},
										"sink": {
											"name": "MetadataObjectType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectlength",
											"type": "Decimal"
										},
										"sink": {
											"name": "MetadataObjectlength",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectPrecision",
											"type": "Decimal"
										},
										"sink": {
											"name": "MetadataObjectPrecision",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectScale",
											"type": "Decimal"
										},
										"sink": {
											"name": "MetadataObjectScale",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectCollation",
											"type": "String"
										},
										"sink": {
											"name": "MetadataObjectCollation",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DataSetID",
											"type": "String"
										},
										"sink": {
											"name": "DataSetID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectOrder",
											"type": "Decimal"
										},
										"sink": {
											"name": "MetadataObjectOrder",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MetadataObjectIdentityFlag",
											"type": "String"
										},
										"sink": {
											"name": "MetadataObjectIdentityFlag",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MetadataObjectRefreshUTCTimeStamp",
											"type": "DateTime"
										},
										"sink": {
											"name": "MetadataObjectRefreshUTCTimeStamp",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "metadatacontainer",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "MetadataStg",
								"type": "DatasetReference",
								"parameters": {
									"DS_SCHEMA_NAME": "ME_Data",
									"DS_TABLE_NAME": "MetadataEntityStage"
								}
							}
						]
					},
					{
						"name": "Delete Processed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Stage Metadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "metadatacontainer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Ingest_Metadata",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Delete Processed Files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[ME_Data].[sp_ProcessDynamicStagedMetadata]",
							"storedProcedureParameters": {
								"DataSetType": {
									"value": {
										"value": "@pipeline().parameters.DataSetType",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "Delete Processed Files_copy1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "GetConfigurations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "metadatacontainer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataSetType": {
						"type": "string"
					},
					"RunGroupCode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataEngine/ParentPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T10:02:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/me_config_dw')]",
				"[concat(variables('workspaceId'), '/datasets/metadatacontainer')]",
				"[concat(variables('workspaceId'), '/datasets/MetadataStg')]",
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]",
				"[concat(variables('workspaceId'), '/pipelines/SQLtoParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/MYSQLtoParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/ORACLEtoParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestMSSQLDataToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "GetConfigurations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "[ME_Data].[sp_GetDynamicMSSQLQuery]",
								"storedProcedureParameters": {
									"DataSetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.DataSetType",
											"type": "Expression"
										}
									},
									"ExecutionGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.RunGroupCode",
											"type": "Expression"
										}
									},
									"ExecutionPlane": {
										"type": "String",
										"value": "a"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "me_config_dw",
								"type": "DatasetReference",
								"parameters": {
									"WorkspaceName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE_Execute_SQL_Pipeline",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetConfigurations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetConfigurations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Generic Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SQLtoParquet",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SqlServerName": {
												"value": "@{item().DBServerName}",
												"type": "Expression"
											},
											"SqlDatabaseName": {
												"value": "@{item().DBName}",
												"type": "Expression"
											},
											"SQLKVName": {
												"value": "@{item().SQLKVName}",
												"type": "Expression"
											},
											"SqlUserName": {
												"value": "@{item().SqlUserName}",
												"type": "Expression"
											},
											"SQLQuery": {
												"value": "@{item().SQLQuery}",
												"type": "Expression"
											},
											"DLContainer": {
												"value": "@{item().DLContainer}",
												"type": "Expression"
											},
											"DLPath": {
												"value": "@{item().DLFolder}",
												"type": "Expression"
											},
											"DLFileName": {
												"value": "@{item().DLFileName}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "ME_Stage_InsertDatageEntry",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Execute Generic Pipeline",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[ME_Stage].[InsertDataStageEntry]",
										"storedProcedureParameters": {
											"DatasetID": {
												"value": {
													"value": "@{item().DatasetID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Partition_String": {
												"value": {
													"value": "@{item().Target_Partition}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Row_Count": {
												"value": "0",
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Metadataengine",
										"type": "LinkedServiceReference",
										"parameters": {
											"SynapseWS": "demoworkspace001",
											"SynapsePool": "EDW"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataSetType": {
						"type": "string"
					},
					"RunGroupCode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataEngine/ParentPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T20:59:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/me_config_dw')]",
				"[concat(variables('workspaceId'), '/pipelines/SQLtoParquet')]",
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestSQLDataToRaw')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "GetConfigurations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "[ME_Data].[sp_GetDynamicMSSQLQuery]",
								"storedProcedureParameters": {
									"DataSetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.DataSetType",
											"type": "Expression"
										}
									},
									"ExecutionGroup": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.RunGroupCode",
											"type": "Expression"
										}
									},
									"ExecutionPlane": {
										"type": "String",
										"value": "A"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "me_config_dw",
								"type": "DatasetReference",
								"parameters": {
									"WorkspaceName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE_Execute_SQL_Pipeline",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetConfigurations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetConfigurations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "ME_Stage_InsertDatageEntry",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Switch1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[ME_Stage].[InsertDataStageEntry]",
										"storedProcedureParameters": {
											"DatasetID": {
												"value": {
													"value": "@{item().DatasetID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"Partition_String": {
												"value": {
													"value": "@{item().Target_Partition}",
													"type": "Expression"
												},
												"type": "String"
											},
											"Row_Count": {
												"value": "0",
												"type": "Int64"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "Metadataengine",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().DataSetType",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "MSSQL",
												"activities": [
													{
														"name": "Execute Generic MSSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "MYSQL",
												"activities": [
													{
														"name": "Execute Generic MYSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "MYSQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "AzMYSQL",
												"activities": [
													{
														"name": "Execute Generic AzMYSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "MYSQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "mysql",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "ORACLE",
												"activities": [
													{
														"name": "Execute Generic ORACLE Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "ORACLEtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"OracleServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"OraclelDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"OracleKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"OracleUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"OracleQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataSetType": {
						"type": "string"
					},
					"RunGroupCode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataEngine/ParentPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T20:59:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/me_config_dw')]",
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]",
				"[concat(variables('workspaceId'), '/pipelines/SQLtoParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/MYSQLtoParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/ORACLEtoParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IngestToStageDW')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "GetStagePartitions",
						"description": "exec sp",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "[ME_Stage].[sp_GetStagePartitions]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "me_config_dw",
								"type": "DatasetReference",
								"parameters": {
									"WorkspaceName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetStagePartitions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetStagePartitions').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Execute Pipeline1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RAWtoStage",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"DatasetID": {
												"value": "@{item().DatasetID}",
												"type": "Expression"
											},
											"PARTITIONSTRING": {
												"value": "@{item().Partition_String}",
												"type": "Expression"
											},
											"Partitionid": {
												"value": "@{item().ID}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "MetadataEngine/ParentPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-14T01:31:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/me_config_dw')]",
				"[concat(variables('workspaceId'), '/pipelines/RAWtoStage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MSSQLtoRAW')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "GetConfigurations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "[ME_Data].[sp_ADFGetSQLConfig]",
								"storedProcedureParameters": {
									"DataSetType": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.DataSetType",
											"type": "Expression"
										}
									},
									"RunGroupCode": {
										"type": "String",
										"value": {
											"value": "@pipeline().parameters.RunGroupCode",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "me_config_dw",
								"type": "DatasetReference",
								"parameters": {
									"WorkspaceName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE_Execute_SQL_Pipeline",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetConfigurations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetConfigurations').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Execute Generic Pipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "SQLtoParquet",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SqlServerName": {
												"value": "@{item().DBServerName}",
												"type": "Expression"
											},
											"SqlDatabaseName": {
												"value": "@{item().DBName}",
												"type": "Expression"
											},
											"SQLKVName": {
												"value": "@{item().SQLKVName}",
												"type": "Expression"
											},
											"SqlUserName": {
												"value": "@{item().SqlUserName}",
												"type": "Expression"
											},
											"SQLQuery": {
												"value": "@{item().SQLQuery}",
												"type": "Expression"
											},
											"DLContainer": {
												"value": "@{item().DLContainer}",
												"type": "Expression"
											},
											"DLPath": {
												"value": "@{item().DLFolder}",
												"type": "Expression"
											},
											"DLFileName": {
												"value": "@{item().DLFileName}",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataSetType": {
						"type": "string",
						"defaultValue": "MSSQL"
					},
					"RunGroupCode": {
						"type": "string",
						"defaultValue": "999"
					}
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T09:08:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/me_config_dw')]",
				"[concat(variables('workspaceId'), '/pipelines/SQLtoParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MYSQLtoParquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "   ",
				"activities": [
					{
						"name": "LogStart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Source query:',pipeline().parameters.SQLQuery,' started')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "SQLtoParquet",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": {
									"value": "@pipeline().parameters.SQLQuery",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "MySQLServer",
								"type": "DatasetReference",
								"parameters": {
									"DBServerName": {
										"value": "@pipeline().parameters.SqlServerName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.SqlDatabaseName",
										"type": "Expression"
									},
									"SQLKVName": {
										"value": "@pipeline().parameters.SQLKVName",
										"type": "Expression"
									},
									"SqlUserName": {
										"value": "@pipeline().parameters.SqlUserName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetFile",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.DLContainer",
										"type": "Expression"
									},
									"dlFolderName": {
										"value": "@pipeline().parameters.DLPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LogEnd_Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SQLtoParquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Success')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "LogEnd_Fail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SQLtoParquet",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Failed please investigate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SqlServerName": {
						"type": "string"
					},
					"SqlDatabaseName": {
						"type": "string"
					},
					"SQLKVName": {
						"type": "string"
					},
					"SqlUserName": {
						"type": "string"
					},
					"SQLQuery": {
						"type": "string"
					},
					"DLContainer": {
						"type": "string"
					},
					"DLPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataEngine/ChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T08:29:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]",
				"[concat(variables('workspaceId'), '/datasets/MySQLServer')]",
				"[concat(variables('workspaceId'), '/datasets/ParquetFile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ORACLEtoParquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "    ",
				"activities": [
					{
						"name": "LogStart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Source query:',pipeline().parameters.OracleQuery,' started')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "edw"
							}
						}
					},
					{
						"name": "ORACLEtoParquet",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@pipeline().parameters.OracleQuery",
									"type": "Expression"
								},
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OraclePLSQLQuery",
								"type": "DatasetReference",
								"parameters": {
									"srchostname": {
										"value": "@pipeline().parameters.OracleServerName",
										"type": "Expression"
									},
									"srcportname": "1521",
									"srcsrvicename": {
										"value": "@pipeline().parameters.OraclelDatabaseName",
										"type": "Expression"
									},
									"srcusername": {
										"value": "@pipeline().parameters.OracleUserName",
										"type": "Expression"
									},
									"srckvsecretname": {
										"value": "@pipeline().parameters.OracleKVName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetFile",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.DLContainer",
										"type": "Expression"
									},
									"dlFolderName": {
										"value": "@pipeline().parameters.DLPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LogEnd_Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ORACLEtoParquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Success')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "edw"
							}
						}
					},
					{
						"name": "LogEnd_Fail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ORACLEtoParquet",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Failed please investigate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "edw"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"OracleServerName": {
						"type": "string"
					},
					"OraclelDatabaseName": {
						"type": "string"
					},
					"OracleKVName": {
						"type": "string"
					},
					"OracleUserName": {
						"type": "string"
					},
					"OracleQuery": {
						"type": "string"
					},
					"DLContainer": {
						"type": "string"
					},
					"DLPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataEngine/ChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T08:29:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]",
				"[concat(variables('workspaceId'), '/datasets/OraclePLSQLQuery')]",
				"[concat(variables('workspaceId'), '/datasets/ParquetFile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetToTables')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is a Generic Pipeline that uses a Spark Notebook to ingest a Parquet source into a Hive, Synapse SQL Pool or a Delta Table",
				"activities": [
					{
						"name": "ParquetToTables Notebook",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "ParquetToTables",
								"type": "NotebookReference"
							},
							"parameters": {
								"blob_account_name": {
									"value": {
										"value": "@pipeline().parameters.ADLS_account_name",
										"type": "Expression"
									},
									"type": "string"
								},
								"blob_container_name": {
									"value": {
										"value": "@pipeline().parameters.ADLS_container_name",
										"type": "Expression"
									},
									"type": "string"
								},
								"blob_relative_path": {
									"value": {
										"value": "@pipeline().parameters.ADLS_relative_path",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_db": {
									"value": {
										"value": "@pipeline().parameters.target_db",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_table": {
									"value": {
										"value": "@pipeline().parameters.target_table",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_type": {
									"value": {
										"value": "@pipeline().parameters.target_type",
										"type": "Expression"
									},
									"type": "string"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"ADLS_account_name": {
						"type": "string"
					},
					"ADLS_container_name": {
						"type": "string"
					},
					"ADLS_relative_path": {
						"type": "string"
					},
					"target_db": {
						"type": "string"
					},
					"target_table": {
						"type": "string"
					},
					"target_type": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataEngine/ChildPipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/ParquetToTables')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PrimeDynamicSQLDBtoRAWMetadata')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"activities": [
					{
						"name": "GetConfigurations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "ME_Config.sp_GENERATE_DynamicRMDBS_discoverSQL",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "me_config_dw",
								"type": "DatasetReference",
								"parameters": {
									"WorkspaceName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE_Execute_SQL_Pipeline",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Delete Processed Files_copy1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetConfigurations').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{item().DataSetType}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "MSSQL",
												"activities": [
													{
														"name": "Execute Generic MSSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "SQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "AzMYSQL",
												"activities": [
													{
														"name": "Execute Generic  AzMSSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "MYSQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "mysql",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "MYSQL",
												"activities": [
													{
														"name": "Execute Generic MYSQL Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "MYSQLtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"SqlServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"SqlDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"SQLKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"SqlUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"SQLQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											},
											{
												"value": "ORACLE",
												"activities": [
													{
														"name": "Execute Generic ORACLE Pipeline",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "ORACLEtoParquet",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {
																"OracleServerName": {
																	"value": "@{item().DBServerName}",
																	"type": "Expression"
																},
																"OraclelDatabaseName": {
																	"value": "@{item().DBName}",
																	"type": "Expression"
																},
																"OracleKVName": {
																	"value": "@{item().SQLKVName}",
																	"type": "Expression"
																},
																"OracleUserName": {
																	"value": "@{item().SqlUserName}",
																	"type": "Expression"
																},
																"OracleQuery": {
																	"value": "@{item().SQLQuery}",
																	"type": "Expression"
																},
																"DLContainer": {
																	"value": "@{item().DLContainer}",
																	"type": "Expression"
																},
																"DLPath": {
																	"value": "@{item().DLFolder}",
																	"type": "Expression"
																},
																"DLFileName": {
																	"value": "@{item().DLFileName}",
																	"type": "Expression"
																}
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Delete Processed Files",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Insert into me_config_dataset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MetadataConfContainer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Insert into me_config_dataset",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FE_Execute_SQL_Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[ME_Config].[sp_LoadPrimeMetadata]"
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "Delete Processed Files_copy1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "GetConfigurations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "MetadataConfContainer",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": false,
								"wildcardFileName": "*.parquet",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DataSetType": {
						"type": "string",
						"defaultValue": "MSSQL"
					},
					"RunGroupCode": {
						"type": "string",
						"defaultValue": "999"
					}
				},
				"folder": {
					"name": "MetadataEngine/ParentPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T10:43:39Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/me_config_dw')]",
				"[concat(variables('workspaceId'), '/datasets/MetadataConfContainer')]",
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]",
				"[concat(variables('workspaceId'), '/pipelines/SQLtoParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/MYSQLtoParquet')]",
				"[concat(variables('workspaceId'), '/pipelines/ORACLEtoParquet')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProcessCurated')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "GetRawPartitionConfig",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderStoredProcedureName": "[ME_Data].[sp_GetRawPartitionCurationMetadata]",
								"storedProcedureParameters": {
									"MaxPartGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.Maxpart",
											"type": "Expression"
										}
									},
									"PartGroup": {
										"type": "Int32",
										"value": {
											"value": "@pipeline().parameters.Part",
											"type": "Expression"
										}
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "me_config_dw",
								"type": "DatasetReference",
								"parameters": {
									"WorkspaceName": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetRawPartitionConfig",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetRawPartitionConfig').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 40,
							"activities": [
								{
									"name": "Execute RawToCleansed",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "RawToCleansed",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"blob_account_name": {
												"value": "@{item().blob_account_name}",
												"type": "Expression"
											},
											"blob_container_name": {
												"value": "@{item().blob_container_name}",
												"type": "Expression"
											},
											"blob_relative_path": {
												"value": "@{item().blob_relative_path}",
												"type": "Expression"
											},
											"target_db": {
												"value": "@{item().target_db}",
												"type": "Expression"
											},
											"target_path": {
												"value": "@{item().target_path}",
												"type": "Expression"
											},
											"target_container": {
												"value": "@{item().target_container}",
												"type": "Expression"
											},
											"target_table": {
												"value": "@{item().target_table}",
												"type": "Expression"
											},
											"partition_by_clause": {
												"value": "@{item().partition_by_clause}",
												"type": "Expression"
											},
											"target_bk": {
												"value": "@{item().target_bk}",
												"type": "Expression"
											},
											"target_type": {
												"value": "@{item().target_type}",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Log Success",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute RawToCleansed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Metadataengine",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat(' UPDATE [ME_Stage].[RawPartitionStage] SET [Status] = 1 Where [ID] = ', string(item().RawPartitionStageID))",
													"type": "Expression"
												}
											}
										],
										"logSettings": {
											"logDestination": "ActivityOutput"
										}
									}
								},
								{
									"name": "Log Failure",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute RawToCleansed",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Metadataengine",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat(' UPDATE [ME_Stage].[RawPartitionStage] SET [Status] = -1 Where [ID] = ', string(item().RawPartitionStageID))",
													"type": "Expression"
												}
											}
										],
										"logSettings": {
											"logDestination": "ActivityOutput"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Maxpart": {
						"type": "int",
						"defaultValue": 1
					},
					"Part": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"folder": {
					"name": "Data Engineering"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/me_config_dw')]",
				"[concat(variables('workspaceId'), '/pipelines/RawToCleansed')]",
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RAWtoStage')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "LogStart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Source Partition:',pipeline().parameters.PARTITIONSTRING,' started')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "LogEnd_Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ME_Stage_sp_DynamicStageLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Success')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "LogEnd_Fail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ME_Stage_sp_DynamicStageLoad",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Failed please investigate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "ME_Stage_sp_DynamicStageLoad",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LogStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[ME_Stage].[sp_DynamicStageLoad]",
							"storedProcedureParameters": {
								"DatasetID": {
									"value": {
										"value": "@pipeline().parameters.DatasetID",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"PARTITIONSTRING": {
									"value": {
										"value": "@pipeline().parameters.PARTITIONSTRING",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "ME_Stage_sp_UpdateStagePartition",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ME_Stage_sp_DynamicStageLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[ME_Stage].[sp_UpdateStagePartition]",
							"storedProcedureParameters": {
								"Partitionid": {
									"value": {
										"value": "@pipeline().parameters.Partitionid",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"State": {
									"value": "1",
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"DatasetID": {
						"type": "int"
					},
					"PARTITIONSTRING": {
						"type": "string"
					},
					"Partitionid": {
						"type": "int"
					}
				},
				"folder": {
					"name": "MetadataEngine/ChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-14T01:29:21Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RawToCleansed')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"activities": [
					{
						"name": "ProcessRawToCleansed",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "RawToCuratedDelta",
								"type": "NotebookReference"
							},
							"parameters": {
								"blob_account_name": {
									"value": {
										"value": "@pipeline().parameters.blob_account_name",
										"type": "Expression"
									},
									"type": "string"
								},
								"blob_container_name": {
									"value": {
										"value": "@pipeline().parameters.blob_container_name",
										"type": "Expression"
									},
									"type": "string"
								},
								"blob_relative_path": {
									"value": {
										"value": "@pipeline().parameters.blob_relative_path",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_db": {
									"value": {
										"value": "@pipeline().parameters.target_db",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_container": {
									"value": {
										"value": "@pipeline().parameters.target_container",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_path": {
									"value": {
										"value": "@pipeline().parameters.target_path",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_table": {
									"value": {
										"value": "@pipeline().parameters.target_table",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_type": {
									"value": {
										"value": "@pipeline().parameters.target_type",
										"type": "Expression"
									},
									"type": "string"
								},
								"partition_by_clause": {
									"value": {
										"value": "@pipeline().parameters.partition_by_clause",
										"type": "Expression"
									},
									"type": "string"
								},
								"target_bk": {
									"value": {
										"value": "@pipeline().parameters.target_bk",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"blob_account_name": {
						"type": "string"
					},
					"blob_container_name": {
						"type": "string"
					},
					"blob_relative_path": {
						"type": "string"
					},
					"target_db": {
						"type": "string"
					},
					"target_path": {
						"type": "string"
					},
					"target_container": {
						"type": "string"
					},
					"target_table": {
						"type": "string"
					},
					"partition_by_clause": {
						"type": "string",
						"defaultValue": " "
					},
					"target_bk": {
						"type": "string",
						"defaultValue": " "
					},
					"target_type": {
						"type": "string",
						"defaultValue": "D"
					}
				},
				"folder": {
					"name": "Data Engineering/Child Pipelines"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/RawToCuratedDelta')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLtoParquet')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"activities": [
					{
						"name": "LogStart",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Source query:',pipeline().parameters.SQLQuery,' started')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "SQLtoParquet",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LogStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.SQLQuery",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings",
									"maxRowsPerFile": 1000000
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerQuery",
								"type": "DatasetReference",
								"parameters": {
									"KvSecretName": {
										"value": "@pipeline().parameters.SQLKVName",
										"type": "Expression"
									},
									"SqlUserName": {
										"value": "@pipeline().parameters.SqlUserName",
										"type": "Expression"
									},
									"SqlDatabaseName": {
										"value": "@pipeline().parameters.SqlDatabaseName",
										"type": "Expression"
									},
									"SqlServerName": {
										"value": "@pipeline().parameters.SqlServerName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetFile",
								"type": "DatasetReference",
								"parameters": {
									"ContainerName": {
										"value": "@pipeline().parameters.DLContainer",
										"type": "Expression"
									},
									"dlFolderName": {
										"value": "@pipeline().parameters.DLPath",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "LogEnd_Success",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SQLtoParquet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Success')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					},
					{
						"name": "LogEnd_Fail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SQLtoParquet",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "ME_Config.sp_insertActivityEvent",
							"storedProcedureParameters": {
								"EventActivityName": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventMessage": {
									"value": {
										"value": "@concat('Pipeline Failed please investigate')",
										"type": "Expression"
									},
									"type": "String"
								},
								"EventSource": {
									"value": "ADF",
									"type": "String"
								},
								"EventSourceID": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "Metadataengine",
							"type": "LinkedServiceReference",
							"parameters": {
								"SynapseWS": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								},
								"SynapsePool": "EDW"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SqlServerName": {
						"type": "string"
					},
					"SqlDatabaseName": {
						"type": "string"
					},
					"SQLKVName": {
						"type": "string"
					},
					"SqlUserName": {
						"type": "string"
					},
					"SQLQuery": {
						"type": "string"
					},
					"DLContainer": {
						"type": "string"
					},
					"DLPath": {
						"type": "string"
					}
				},
				"folder": {
					"name": "MetadataEngine/ChildPipelines"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T08:29:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]",
				"[concat(variables('workspaceId'), '/datasets/SqlServerQuery')]",
				"[concat(variables('workspaceId'), '/datasets/ParquetFile')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataConfContainer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "   ",
				"linkedServiceName": {
					"referenceName": "MetadataLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "me_config_dataset",
						"fileSystem": "metadata"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MetadataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataStg')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"linkedServiceName": {
					"referenceName": "Metadataengine",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWS": "demoworkspace001",
						"SynapsePool": "EDW"
					}
				},
				"parameters": {
					"DS_SCHEMA_NAME": {
						"type": "string"
					},
					"DS_TABLE_NAME": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().DS_SCHEMA_NAME",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().DS_TABLE_NAME",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Metadataentstg')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"linkedServiceName": {
					"referenceName": "Metadataengine",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWS": "demoworkspace001",
						"SynapsePool": "EDW"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [
					{
						"name": "MetadataQuerySource",
						"type": "varchar"
					},
					{
						"name": "MetadataEntityName",
						"type": "varchar"
					},
					{
						"name": "MetadataSchemaName",
						"type": "varchar"
					},
					{
						"name": "MetadataObjectName",
						"type": "varchar"
					},
					{
						"name": "MetadataObjectType",
						"type": "varchar"
					},
					{
						"name": "MetadataObjectlength",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "MetadataObjectPrecision",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "MetadataObjectScale",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "MetadataObjectCollation",
						"type": "varchar"
					},
					{
						"name": "DataSetID",
						"type": "varchar"
					},
					{
						"name": "MetadataObjectOrder",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "MetadataObjectIdentityFlag",
						"type": "varchar"
					},
					{
						"name": "MetadataObjectRefreshUTCTimeStamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "ME_Data",
					"table": "MetadataEntityStage"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MySQLServer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"linkedServiceName": {
					"referenceName": "MySQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"servername": {
							"value": "@dataset().DBServerName",
							"type": "Expression"
						},
						"port": "3306",
						"databasename": {
							"value": "@dataset().DBName",
							"type": "Expression"
						},
						"username": {
							"value": "@dataset().SqlUserName",
							"type": "Expression"
						},
						"kvsecret": {
							"value": "@dataset().SQLKVName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"DBServerName": {
						"type": "string"
					},
					"DBName": {
						"type": "string"
					},
					"SQLKVName": {
						"type": "string"
					},
					"SqlUserName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MySQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OraclePLSQLQuery')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"linkedServiceName": {
					"referenceName": "OracleGeneric",
					"type": "LinkedServiceReference",
					"parameters": {
						"HostName": {
							"value": "@dataset().srchostname",
							"type": "Expression"
						},
						"HostPort": {
							"value": "@dataset().srcportname",
							"type": "Expression"
						},
						"Service_Name": {
							"value": "@dataset().srcsrvicename",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().srcusername",
							"type": "Expression"
						},
						"srckvsecretname": {
							"value": "@dataset().srckvsecretname",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"srchostname": {
						"type": "String"
					},
					"srcportname": {
						"type": "String"
					},
					"srcsrvicename": {
						"type": "String"
					},
					"srcusername": {
						"type": "String"
					},
					"srckvsecretname": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/OracleGeneric')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetFile')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"linkedServiceName": {
					"referenceName": "MetadataLake",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ContainerName": {
						"type": "string"
					},
					"dlFolderName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@dataset().dlFolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().ContainerName",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MetadataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SqlServerQuery')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"linkedServiceName": {
					"referenceName": "SQLServer",
					"type": "LinkedServiceReference",
					"parameters": {
						"SqlServerName": {
							"value": "@dataset().SqlServerName",
							"type": "Expression"
						},
						"SqlDatabaseName": {
							"value": "@dataset().SqlDatabaseName",
							"type": "Expression"
						},
						"sqlusername": {
							"value": "@dataset().SqlUserName",
							"type": "Expression"
						},
						"kvsecretname": {
							"value": "@dataset().KvSecretName",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"KvSecretName": {
						"type": "string"
					},
					"SqlUserName": {
						"type": "string"
					},
					"SqlDatabaseName": {
						"type": "string"
					},
					"SqlServerName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/SQLServer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/me_config_dataset')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "   ",
				"linkedServiceName": {
					"referenceName": "MetadataLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "me_config_dataset",
						"fileSystem": "metadata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MetadataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/me_config_dw')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"linkedServiceName": {
					"referenceName": "Metadataengine",
					"type": "LinkedServiceReference",
					"parameters": {
						"SynapseWS": {
							"value": "@dataset().WorkspaceName",
							"type": "Expression"
						},
						"SynapsePool": "EDW"
					}
				},
				"parameters": {
					"WorkspaceName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Metadataengine')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/metadatacontainer')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "    ",
				"linkedServiceName": {
					"referenceName": "MetadataLake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "inbound",
						"fileSystem": "metadata"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MetadataLake')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureKeyVault1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MetadataLake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "   ",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('MetadataLake_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Metadataengine')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "This is the Main Linked service that communicates with the Metadata Engine ",
				"parameters": {
					"SynapseWS": {
						"type": "string",
						"defaultValue": "demoworkspace001"
					},
					"SynapsePool": {
						"type": "string",
						"defaultValue": "EDW"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('Metadataengine_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MySQLServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"parameters": {
					"servername": {
						"type": "string"
					},
					"port": {
						"type": "string",
						"defaultValue": "3306"
					},
					"databasename": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"kvsecret": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('MySQLServer_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().kvsecret",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/OracleGeneric')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "  ",
				"parameters": {
					"HostName": {
						"type": "String"
					},
					"HostPort": {
						"type": "String"
					},
					"Service_Name": {
						"type": "String"
					},
					"UserName": {
						"type": "String"
					},
					"srckvsecretname": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('OracleGeneric_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().srckvsecretname",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PowerBIWorkspace1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "PowerBIWorkspace",
				"typeProperties": {
					"workspaceID": "6dc98023-89cf-43be-906a-93c55889fc4e",
					"tenantID": "72f988bf-86f1-41af-91ab-2d7cd011db47"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQLServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"parameters": {
					"SqlServerName": {
						"type": "String"
					},
					"SqlDatabaseName": {
						"type": "string"
					},
					"sqlusername": {
						"type": "string"
					},
					"kvsecretname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SQLServer_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "@linkedService().kvsecretname",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/demoworkspace001-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('demoworkspace001-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/demoworkspace001-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('demoworkspace001-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/piraeusdemo01-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('piraeusdemo01-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/piraeusdemo01-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('piraeusdemo01-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProcessDimCustomer')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "salesltcustomer"
						},
						{
							"name": "DimCustomerlkup"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "dcDimCustomerETLDate"
						},
						{
							"name": "join1"
						},
						{
							"name": "RemoveExisting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          EnrichedProcessDateTime as timestamp,",
						"          RawFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'retail_sales',",
						"     tableName: 'saleslt_customer') ~> salesltcustomer",
						"source(output(",
						"          CustomerID as integer,",
						"          DimCustomerTitle as string,",
						"          DimCustomerFirstName as string,",
						"          DimCustomerMiddleName as string,",
						"          DimCustomerLastName as string,",
						"          DimCustomerCompanyName as string,",
						"          DimCustomerEmailAddress as string,",
						"          DimCustomerSourceDate as timestamp,",
						"          DimCustomerETLDate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'SalesModel',",
						"     tableName: 'DimCustomer') ~> DimCustomerlkup",
						"salesltcustomer derive(DimCustomerETLDate = currentUTC()) ~> dcDimCustomerETLDate",
						"dcDimCustomerETLDate, DimCustomerlkup join(salesltcustomer@CustomerID == DimCustomerlkup@CustomerID,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> join1",
						"join1 filter(isNull(DimCustomerlkup@CustomerID)) ~> RemoveExisting",
						"RemoveExisting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'SalesModel',",
						"     tableName: 'DimCustomer',",
						"     input(",
						"          CustomerID as integer,",
						"          DimCustomerTitle as string,",
						"          DimCustomerFirstName as string,",
						"          DimCustomerMiddleName as string,",
						"          DimCustomerLastName as string,",
						"          DimCustomerCompanyName as string,",
						"          DimCustomerEmailAddress as string,",
						"          DimCustomerSourceDate as timestamp,",
						"          DimCustomerETLDate as string",
						"     ),",
						"     mapColumn(",
						"          CustomerID = salesltcustomer@CustomerID,",
						"          DimCustomerTitle = Title,",
						"          DimCustomerFirstName = FirstName,",
						"          DimCustomerMiddleName = MiddleName,",
						"          DimCustomerLastName = LastName,",
						"          DimCustomerCompanyName = CompanyName,",
						"          DimCustomerEmailAddress,",
						"          DimCustomerSourceDate = ModifiedDate,",
						"          DimCustomerETLDate = dcDimCustomerETLDate@DimCustomerETLDate",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProcessDimProduct')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "Product"
						},
						{
							"name": "ProductCategory"
						},
						{
							"name": "DimProductLkup"
						},
						{
							"name": "ProductModel"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "FilteredProduct"
						},
						{
							"name": "filter1"
						},
						{
							"name": "join2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          EnrichedProcessDateTime as timestamp,",
						"          RawFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'retail_sales',",
						"     tableName: 'saleslt_product') ~> Product",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          EnrichedProcessDateTime as timestamp,",
						"          RawFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'retail_sales',",
						"     tableName: 'saleslt_productcategory') ~> ProductCategory",
						"source(output(",
						"          ProductId as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCodeName as string,",
						"          IntroductionDate as date,",
						"          PlannedAbandonmentDate as date,",
						"          ProductColour as string,",
						"          ProductCategory as string,",
						"          DimProductETLDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'SalesModel',",
						"     tableName: 'DimProduct') ~> DimProductLkup",
						"source(output(",
						"          ProductModelID as integer,",
						"          Name as string,",
						"          CatalogDescription as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          EnrichedProcessDateTime as timestamp,",
						"          RawFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'retail_sales',",
						"     tableName: 'saleslt_productmodel') ~> ProductModel",
						"Product, ProductCategory join(Product@ProductCategoryID == ProductCategory@ProductCategoryID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> join1",
						"join1, DimProductLkup join(Product@ProductID == DimProductLkup@ProductId,",
						"     joinType:'left',",
						"     broadcast: 'auto')~> FilteredProduct",
						"FilteredProduct filter(isNull(DimProductLkup@ProductId)) ~> filter1",
						"filter1, ProductModel join(Product@ProductModelID == ProductModel@ProductModelID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> join2",
						"join2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'SalesModel',",
						"     tableName: 'DimProduct',",
						"     input(",
						"          ProductId as integer,",
						"          ProductName as string,",
						"          ProductModelName as string,",
						"          ProductCodeName as string,",
						"          IntroductionDate as date,",
						"          PlannedAbandonmentDate as date,",
						"          ProductColour as string,",
						"          ProductCategory as string,",
						"          DimProductETLDate as timestamp",
						"     ),",
						"     mapColumn(",
						"          ProductId = Product@ProductID,",
						"          ProductName = Product@Name,",
						"          ProductModelName = ProductModel@Name,",
						"          ProductCodeName = ProductNumber,",
						"          IntroductionDate = SellStartDate,",
						"          PlannedAbandonmentDate = SellEndDate,",
						"          ProductColour = Color,",
						"          ProductCategory = ProductCategory@Name,",
						"          DimProductETLDate = Product@EnrichedProcessDateTime",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ProcessFactSales')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "OrderHeader"
						},
						{
							"name": "OrderLines"
						},
						{
							"name": "fktSaleslkup"
						}
					],
					"sinks": [
						{
							"name": "FactSales"
						}
					],
					"transformations": [
						{
							"name": "SalesTransactions"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          EnrichedProcessDateTime as timestamp,",
						"          RawFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'retail_sales',",
						"     tableName: 'saleslt_salesorderheader') ~> OrderHeader",
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp,",
						"          EnrichedProcessDateTime as timestamp,",
						"          RawFileName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'retail_sales',",
						"     tableName: 'saleslt_salesorderdetail') ~> OrderLines",
						"source(output(",
						"          id as integer,",
						"          OrderDateID as integer,",
						"          OrderShipDateID as integer,",
						"          DimCustomerID as integer,",
						"          DimProductID as integer,",
						"          Quantity as integer,",
						"          UnitPrice as decimal(18,2),",
						"          UnitDiscount as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'SalesModel',",
						"     tableName: 'FactSales') ~> fktSaleslkup",
						"OrderHeader, OrderLines join(OrderHeader@SalesOrderID == OrderLines@SalesOrderID,",
						"     joinType:'inner',",
						"     broadcast: 'auto')~> SalesTransactions",
						"SalesTransactions derive(OrderDate = toInteger(replace(left(toString(OrderDate, 'yyyy-MM-dd'), 10),'-','')),",
						"          ShipDate = toInteger(replace(left(toString(ShipDate, 'yyyy-MM-dd'), 10),'-',''))) ~> derivedColumn1",
						"derivedColumn1, fktSaleslkup lookup(OrderHeader@SalesOrderID == id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(isNull(id)) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'SalesModel',",
						"     tableName: 'FactSales',",
						"     input(",
						"          id as integer,",
						"          OrderDateID as integer,",
						"          OrderShipDateID as integer,",
						"          DimCustomerID as integer,",
						"          DimProductID as integer,",
						"          Quantity as integer,",
						"          UnitPrice as decimal(18,2),",
						"          UnitDiscount as decimal(18,2)",
						"     ),",
						"     mapColumn(",
						"          id = OrderHeader@SalesOrderID,",
						"          OrderDateID = OrderDate,",
						"          OrderShipDateID = ShipDate,",
						"          DimCustomerID = CustomerID,",
						"          DimProductID = ProductID,",
						"          Quantity = OrderQty,",
						"          UnitPrice = OrderLines@UnitPrice,",
						"          UnitDiscount = UnitPriceDiscount",
						"     )) ~> FactSales"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/1_CreateBaselineSchema')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "DECLARE @SQL AS VARCHAR(MAX)='\nCREATE SCHEMA [ME_Config]\n    AUTHORIZATION [dbo]\n'\nBEGIN TRY EXEC(@SQL) END TRY BEGIN CATCH PRINT 1 END CATCH\nGO\nDECLARE @SQL AS VARCHAR(MAX)='\nCREATE SCHEMA [ME_Data]\n    AUTHORIZATION [dbo]'    \nBEGIN TRY EXEC(@SQL) END TRY BEGIN CATCH PRINT 2 END CATCH\nGO\nDECLARE @SQL AS VARCHAR(MAX)='\nCREATE SCHEMA [ME_Secure]\n    AUTHORIZATION [dbo]'\nBEGIN TRY EXEC(@SQL) END TRY BEGIN CATCH PRINT 3 END CATCH\nGO\nDECLARE @SQL AS VARCHAR(MAX)='\nCREATE SCHEMA [ME_Stage]\n    AUTHORIZATION [dbo]'\nBEGIN TRY EXEC(@SQL) END TRY BEGIN CATCH PRINT 4 END CATCH\nGO\nDECLARE @SQL AS VARCHAR(MAX)='    \nCREATE SCHEMA [Metadata]\n    AUTHORIZATION [dbo]'    \nBEGIN TRY EXEC(@SQL) END TRY BEGIN CATCH PRINT 5 END CATCH\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/2_ME_Config_CreateBaselineTables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "CREATE TABLE [ME_Config].[ActivityLog] (\n    [id]                BIGINT         IDENTITY (1, 1) NOT NULL,\n    [EventSource]       VARCHAR (50)   NOT NULL,\n    [EventSourceID]     VARCHAR (100)  NOT NULL,\n    [EventActivityName] VARCHAR (100)  NOT NULL,\n    [EventUTCTimestamp] DATETIME       NOT NULL,\n    [EventMessage]      VARCHAR (1000) NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);\n\nCREATE TABLE [ME_Config].[Connection] (\n    [Id]                 BIGINT        IDENTITY (1, 1) NOT NULL,\n    [ConnectionType]     VARCHAR (100) NOT NULL,\n    [ConnectionName]     VARCHAR (250) NOT NULL,\n    [ConnectionString]   VARCHAR (100) NOT NULL,\n    [ConnectionKVSecret] VARCHAR (250) NOT NULL,\n\t[ConnetionUserName] [varchar](100) NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);\n\nCREATE TABLE [ME_Config].[DataSet] (\n    [Id]           BIGINT        IDENTITY (1, 1) NOT NULL,\n    [DataSetType]  VARCHAR (100) NOT NULL,\n    [RunGroupCode] VARCHAR (20)  NOT NULL,\n    [DataSetName]  VARCHAR (250) NOT NULL,\n    [SchemaName]   VARCHAR (100) NULL,\n    [TargetLake]   VARCHAR (250) NOT NULL,\n    [ConnectionId] BIGINT        NOT NULL,\n    [IsEnabled]    INT           DEFAULT ((0)) NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);\n\nCREATE TABLE [ME_Config].[GLOBALS] (\n    [Attribute]      VARCHAR (200)  NULL,\n    [AttributeValue] VARCHAR (4000) NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/3_ME_Data_CreateBaselineTables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "CREATE TABLE [ME_Data].[MetadataEntityStage] (\n    [MetadataQuerySource]               VARCHAR (50)  NULL,\n    [MetadataEntityName]                VARCHAR (250) NULL,\n    [MetadataSchemaName]                VARCHAR (250) NULL,\n    [MetadataObjectName]                VARCHAR (250) NULL,\n    [MetadataObjectType]                VARCHAR (250) NULL,\n    [MetadataObjectlength]              VARCHAR (20)  NULL,\n    [MetadataObjectPrecision]           VARCHAR (20)  NULL,\n    [MetadataObjectScale]               VARCHAR (20)  NULL,\n    [MetadataObjectCollation]           VARCHAR (250) NULL,\n    [DataSetID]                         VARCHAR (20)  NULL,\n    [MetadataObjectOrder]               INT           NOT NULL,\n    [MetadataObjectIdentityFlag]        VARCHAR (20)  NULL,\n    [MetadataObjectRefreshUTCTimeStamp] DATETIME      NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/4_ME_Secure_CreateBaselineTables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "CREATE TABLE [ME_Secure].[DL_Containers] (\n    [Id]                   BIGINT         IDENTITY (1, 1) NOT NULL,\n    [DLContainerName]      VARCHAR (500)  NOT NULL,\n    [DLstorageaccountname] VARCHAR (500)  NOT NULL,\n    [DLKVSecretName]       VARCHAR (500)  NOT NULL,\n    [KeyVaultName]         VARCHAR (1000) NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);\n\nCREATE TABLE [ME_Secure].[DW_Nodes] (\n    [Id]             BIGINT        IDENTITY (1, 1) NOT NULL,\n    [DWName]         VARCHAR (500) NOT NULL,\n    [DWArcType]      VARCHAR (100) NOT NULL,\n    [DWHostName]     VARCHAR (500) NOT NULL,\n    [DWDBName]       VARCHAR (200) NOT NULL,\n    [DWUserName]     VARCHAR (100) NOT NULL,\n    [DWUserKVSecret] VARCHAR (100) NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/5_ME_Stage_CreateBaselineTables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "CREATE TABLE [ME_Stage].[RawPartitionStage] (\n    [Id]               BIGINT        IDENTITY (1, 1) NOT NULL,\n    [DatasetID]        INT           NOT NULL,\n    [Partition_String] VARCHAR (100) NOT NULL,\n    [Row_Count]        BIGINT        NOT NULL,\n    [InsertTimestamp]  DATETIME2 (7) NOT NULL,\n    [Status]           INT           DEFAULT ((0)) NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/6_Metadata_CreateBaselineTables')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "CREATE TABLE [Metadata].[Attribute] (\n    [Id]                     BIGINT          IDENTITY (1, 1) NOT NULL,\n    [EntityId]               BIGINT          NOT NULL,\n    [ObjectId]               BIGINT          NULL,\n    [MetadataObjectHash]     BIGINT          NULL,\n    [DataSetID]              VARCHAR (20)    NULL,\n    [KEY]                    VARCHAR (100)   NULL,\n    [Value]                  NVARCHAR (4000) NULL,\n    [KeyValueDataType]       VARCHAR (50)    NULL,\n    [KeyValueRefreshDate]    DATETIME        NOT NULL,\n    [RecordProcessTimestamp] DATETIME        NOT NULL,\n    [CreatedUTCTimestamp]    DATETIME        NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);\n\nCREATE TABLE [Metadata].[Entity] (\n    [Id]                     BIGINT         IDENTITY (1, 1) NOT NULL,\n    [DataSetId]              BIGINT         NOT NULL,\n    [Name]                   VARCHAR (250)  NULL,\n    [SchemaName]             VARCHAR (250)  NULL,\n    [TargetLake]             VARCHAR (250)  NOT NULL,\n    [LakeFolder]             VARCHAR (2000) NOT NULL,\n    [RecordProcessTimestamp] DATETIME       NOT NULL,\n    [CreatedUTCTimestamp]    DATETIME       NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);\nCREATE TABLE [Metadata].[Object] (\n    [Id]                                BIGINT        IDENTITY (1, 1) NOT NULL,\n    [EntityId]                          BIGINT        NOT NULL,\n    [DataSetID]                         VARCHAR (20)  NULL,\n    [MetadataObjectName]                VARCHAR (250) NULL,\n    [MetadataObjectOrder]               INT           NOT NULL,\n    [MetadataObjectHash]                BIGINT        NULL,\n    [MetadataObjectRefreshUTCTimeStamp] DATETIME      NULL,\n    [RecordProcessTimestamp]            DATETIME      NOT NULL,\n    [CreatedUTCTimestamp]               DATETIME      NOT NULL\n)\nWITH (CLUSTERED COLUMNSTORE INDEX, DISTRIBUTION = ROUND_ROBIN);\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/7_ME_Config_CreateFunctions')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "CREATE FUNCTION [ME_Config].[fnGetDatatypedeff] (@DataSetType [VARCHAR](50),@DataType [VARCHAR](500),@Size [VARCHAR](20),@Precision [VARCHAR](20),@SCALE [VARCHAR](20)) RETURNS VARCHAR(500)\nAS\nBEGIN\n    -- Declare the return variable\n\tDECLARE @DATATYPEDEFF VARCHAR(500)\n\t\n/*Datatype Definition for Microsoft SQL Datatypes*/\n\n\nIF @DataSetType = 'MSSQL'\nSET @DATATYPEDEFF =(\n/*SELECT*/\tCASE\tWHEN\t@DataType LIKE '%INT%' or\n\t\t\t\t\t\t@DataType LIKE 'bit' or\n\t\t\t\t\t\t--@DataType LIKE 'xml' or\n\t\t\t\t\t\t@DataType LIKE 'uniqueidentifier' or\n\t\t\t\t\t\t@DataType LIKE '%money%' or\n\t\t\t\t\t\t@DataType LIKE 'real' or\n\t\t\t\t\t\t(@DataType = 'float' and @Precision='53')\n\n\t\t\t\tTHEN\t@DataType\n\t\t\t\tWHEN\t@DataType IN\t(\n\t\t\t\t\t\t\t\t\t\t'DECIMAL'\n\t\t\t\t\t\t\t\t\t\t,'DEC'\n\t\t\t\t\t\t\t\t\t\t,'numeric'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\tTHEN\t@DataType + '('+@Precision+','+@SCALE+')'\n\t\t\t\t\n\t\t\t\tWHEN\t@DataType LIKE '%var%' and @DataType != 'sql_variant'\n\t\t\t\tTHEN\t@DataType + '('+CASE WHEN @Size=-1 or @Size > 4000 Then 'MAX' ELSE @Size END + ')'\n\n\t\t\t\tWHEN\t@DataType IN\t(\n\t\t\t\t\t\t\t\t\t\t'datetime'\n\t\t\t\t\t\t\t\t\t\t,'date'\n\t\t\t\t\t\t\t\t\t\t,'smalldatetime'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\tTHEN\t@DataType \n\t\t\t\tWHEN\t@DataType IN\t(\n\t\t\t\t\t\t\t\t\t\t'time'\n\t\t\t\t\t\t\t\t\t\t,'datetime2'\n\t\t\t\t\t\t\t\t\t\t,'datetimeoffset'\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\tTHEN\t@DataType + '('+@SCALE+')'\n\t\t\t\tWHEN    @DataType LIKE 'xml'\n\t\t\t\tTHEN\t'VARCHAR(MAX)'\n\t\t\t\tELSE\t@DataType + '('+@Size+')'\n\t\tEND\n)\n\n/*Datatype Definition for Oracle SQL Datatypes*/\nIF @DataSetType = 'ORACLE'\nSET @DATATYPEDEFF = @DataType + '('+@Size+')'\n\n/*Datatype Definition for MySQL Datatypes*/\nIF @DataSetType Like '%MySQL'\nSET @DATATYPEDEFF = (\n\t\t\t\t\t\tCASE\t\n\t\t\t\t\t\t\t/*Integer*/\n\t\t\t\t\t\t\tWHEN\t(@DataType LIKE '%INT%' AND @DataType !='MEDIUMINT')  \n\t\t\t\t\t\t\tTHEN\t@DataType\n\t\t\t\t\n\t\t\t\t\t\t\tWHEN\t@DataType ='MEDIUMINT'\n\t\t\t\t\t\t\tTHEN\t'INT'\n\t\t\t\t\t\t\t/*Decimal*/\n\t\t\t\t\t\t\tWHEN\t@DataType =\t'DECIMAL' and @Precision <= 38\n\t\t\t\t\t\t\tTHEN\t@DataType + '('+@Precision+','+@SCALE+')'\n\t\t\t\t\n\t\t\t\t\t\t\tWHEN\t@DataType =\t'DECIMAL' and @Precision > 38\n\t\t\t\t\t\t\tTHEN\t'FLOAT '\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t/*Floating Point*/\n\t\t\t\t\t\t\tWHEN\t@DataType IN ('DOUBLE','REAL')\n\t\t\t\t\t\t\tTHEN\t'float(53)'\n\n\t\t\t\t\t\t\tWHEN\t@DataType ='FLOAT' AND ISNULL(@SCALE,-1) > 0\n\t\t\t\t\t\t\tTHEN\t'float(24)'\n\t\t\t\t\t\t\tWHEN\t@DataType ='FLOAT' AND ISNULL(@SCALE,-1) <= 0\n\t\t\t\t\t\t\tTHEN\t'float('+@Precision+')'\n\n\t\t\t\t\t\t\tWHEN\t(@DataType LIKE '%char' OR @DataType LIKE '%TEXT')\n\t\t\t\t\t\t\tTHEN\t@DataType + '('+CASE WHEN @Size=-1 or @Size > 4000 Then 'MAX' ELSE @Size END + ')'\n\n\t\t\t\t\t\t\tWHEN\t@DataType IN\t(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'date'\n\t\t\t\t\t\t\t\t\t\t\t\t\t,'time'\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\tTHEN\t@DataType \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tWHEN\t@DataType = 'DATETIME'\n\t\t\t\t\t\t\tTHEN\t'datetime2'\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tWHEN\t@DataType = 'TIMESTAMP'\n\t\t\t\t\t\t\tTHEN\t'smalldatetime'\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tWHEN\t@DataType = 'YEAR'\n\t\t\t\t\t\t\tTHEN\t'smallint'\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tWHEN    @DataType LIKE 'xml'\n\t\t\t\t\t\t\tTHEN\t'VARCHAR(MAX)'\n\n\t\t\t\t\t\t\tWHEN    (@DataType LIKE '%BINARY' OR @DataType LIKE '%BLOB')\n\t\t\t\t\t\t\tTHEN    'varbinary'+ '('+CASE WHEN @Size=-1 or @Size > 4000 Then 'MAX' ELSE @Size END + ')'\n\n\t\t\t\t\t\t\tELSE\t@DataType + '('+@Size+')'\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\n    -- Return the result of the function\n    RETURN @DATATYPEDEFF\nEND\nGO\n\nCREATE FUNCTION [ME_Config].[fnGetRMDBSQuery] (@DataSetID [VARCHAR](20),@DataSetName [VARCHAR](250),@SchemaName [VARCHAR](250),@DataSetType [VARCHAR](100)) RETURNS VARCHAR(4000)\nAS\nBEGIN\n    -- Declare the return variable\n    DECLARE @Query VARCHAR(MAX)\n\n    -- T-SQL statements to compute the return value\nIF @DataSetType IN ('MSSQL','MYSQL','AzMYSQL') SET @Query ='\nSELECT\t¬Dynamic¬ AS MetadataQuerySource\n\t\t,TABLE_NAME AS MetadataEntityName\n\t\t,TABLE_SCHEMA AS MetadataSchemaName\n\t\t,COLUMN_NAME AS MetadataObjectName\n\t\t,DATA_TYPE AS MetadataObjectType\n\t\t,CHARACTER_MAXIMUM_LENGTH AS MetadataObjectlength\n\t\t,FLOOR(NUMERIC_PRECISION) AS MetadataObjectPrecision\n\t\t,FLOOR(NUMERIC_SCALE) AS MetadataObjectScale\n\t\t,COALESCE(COLLATION_NAME,¬¬) AS MetadataObjectCollation\n\t\t,¬<DataSetID>¬ AS DataSetID\n\t\t,FLOOR(ORDINAL_POSITION) AS MetadataObjectOrder\n\t\t,¬0¬ AS MetadataObjectIdentityFlag\n\t\t,'+CASE WHEN @DataSetType IN ('MYSQL','AzMYSQL') THEN 'utc_timestamp()' ELSE 'GETUTCDATE()' END +' AS MetadataObjectRefreshUTCTimeStamp\n\t\t\t\t\nFROM\tINFORMATION_SCHEMA.COLUMNS\nWHERE\tTABLE_NAME = ¬<DataSetName>¬\n\t\tAND TABLE_SCHEMA = ¬<SchemaName>¬';\n    -- T-SQL statements to compute the return value\n\t-- do we want CHAR_LENGTH or DATA_LENGTH ???\nIF @DataSetType IN ('ORACLE') SET @Query ='\nSELECT\t¬Dynamic¬               AS \"MetadataQuerySource\"\n\t\t,TABLE_NAME             AS \"MetadataEntityName\"\n\t\t,OWNER                  AS \"MetadataSchemaName\"\n\t\t,COLUMN_NAME            AS \"MetadataObjectName\"\n\t\t,DATA_TYPE              AS \"MetadataObjectType\"\n\t\t,CHAR_LENGTH            AS \"MetadataObjectlength\"\n\t\t,FLOOR(DATA_PRECISION)  AS \"MetadataObjectPrecision\"\n\t\t,FLOOR(DATA_SCALE)      AS \"MetadataObjectScale\"\n\t\t,COALESCE(COLLATION,¬¬) AS \"MetadataObjectCollation\"\n\t\t,¬<DataSetID>¬          AS \"DataSetID\"\n\t\t,FLOOR(COLUMN_ID)       AS \"MetadataObjectOrder\"\n\t\t,¬0¬                    AS \"MetadataObjectIdentityFlag\"\n\t\t,'+CASE WHEN @DataSetType IN ('ORACLE') THEN 'LOCALTIMESTAMP AT TIME ZONE ¬UTC¬' END +' AS \"MetadataObjectRefreshUTCTimeStamp\"\n\t\t\t\t\nFROM\tALL_TAB_COLUMNS\nWHERE\tTABLE_NAME = ¬<DataSetName>¬\n\t\tAND OWNER = ¬<SchemaName>¬';\nSET @Query=REPLACE(@Query,'¬','''')\nSET @Query=REPLACE(@Query,'<DataSetID>',@DataSetID)\nSET @Query=REPLACE(@Query,'<DataSetName>',@DataSetName)\nSET @Query=REPLACE(@Query,'<SchemaName>',@SchemaName)\n\n    -- Return the result of the function\n    RETURN @Query\n\n\t\nEND\nGO\n\nCREATE FUNCTION [ME_Config].[fnGetConfigurationSQLQuery] (@ConnectionType [VARCHAR](50),@ConnectionId [bigint]) RETURNS VARCHAR(500)\nAS\nBEGIN\n    -- Declare the return variable\n\tDECLARE @SQLQUERY VARCHAR(500)\n\n/*Datatype Definition for Microsoft SQL Datatypes*/\nIF @ConnectionType in ('MSSQL','MYSQL','AzMYSQL')\nBEGIN\n  SET @SQLQUERY = 'SELECT ''' + @ConnectionType + ''' AS DataSetType,  ' +\n                          '''999''                    AS RunGroupCode, ' +\n                          'TABLE_NAME                 AS DataSetName,  ' +\n                          'TABLE_SCHEMA               AS SchemaName,   ' +\n                          '''RAW''                    AS TargetLake,   ' +\n                          '''' + cast(@ConnectionId as varchar) + '''  AS ConnectionId, ' +\n                          '0                          AS IsEnabled ' +\n                  ' FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = ''BASE TABLE'''\n  IF @ConnectionType LIKE '%MYSQL'\n    SET @SQLQUERY += ' AND TABLE_SCHEMA NOT IN (''mysql'',''performance_schema'',''sys'')'\nEND\nELSE IF @ConnectionType = 'ORACLE'\nBEGIN\n  SET @SQLQUERY = REPLACE(\t'SELECT ¬' + @ConnectionType + '¬ AS DataSetType,  ' +\n\t\t\t\t\t\t\t'CAST(¬999¬ as int)\t\t\tAS RunGroupCode, ' +\n\t\t\t\t\t\t\t'TABLE_NAME                 AS DataSetName,  ' +\n\t\t\t\t\t\t\t'OWNER                      AS SchemaName,   ' +\n\t\t\t\t\t\t\t'¬RAW¬\t\t\t\t\t\tAS TargetLake,   ' +\n\t\t\t\t\t\t\t'CAST(¬' + cast(@ConnectionId as varchar) + '¬ as int)  AS ConnectionId, ' +\n\t\t\t\t\t\t\t'CAST(0 as int)\t\t\t\tAS IsEnabled ' +\n\t\t\t\t\t\t\t' FROM ALL_TABLES WHERE TABLESPACE_NAME NOT IN (¬SYSTEM¬, ¬SYSAUX¬)'\n\t\t\t\t\t\t,'¬','''')\nEND\t\t\t\t\t\t\t\nELSE\n  SET @SQLQUERY = ''\n\n-- Return the result of the function\nRETURN @SQLQUERY\nEND\nGO\n\n\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/8_Metadata_DeltaConfig')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "CREATE VIEW Metadata.DeltaConfig\nAS\nSELECT C.Entityid\n\t,WhereCol = C.[Value]\n\t,WhereOperator = o.[value]\n\t,wherevalue = ISNULL(v.[value], CASE \n\t\t\tWHEN DT.[Value] LIKE '%DATE%'\n\t\t\t\tTHEN '1900-01-01'\n\t\t\tELSE '0'\n\t\t\tEND)\nFROM [Metadata].[Attribute] C WITH (NOLOCK)\nINNER JOIN [Metadata].[Attribute] O WITH (NOLOCK) ON C.Entityid = O.Entityid\nINNER JOIN [Metadata].[Attribute] V WITH (NOLOCK) ON C.Entityid = V.Entityid\nINNER JOIN [Metadata].[Attribute] DT WITH (NOLOCK) ON C.Entityid = DT.Entityid\nWHERE C.[Key] = 'EntityDeltaColumn'\n\tAND O.[Key] = 'EntityDeltaOperator'\n\tAND V.[Key] = 'EntityDeltaValue'\n\tAND DT.[Key] = 'EntityDeltaValueType'",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "master",
						"poolName": "Built-in"
					}
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/9_StoreProcedures')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Run Me 1st"
				},
				"content": {
					"query": "IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_ADFGetDynamicRDBMSQuery]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_ADFGetDynamicRDBMSQuery];\nGO\nCREATE PROC [ME_Config].[sp_ADFGetDynamicRDBMSQuery] @DataSetType [VARCHAR](100),@RunGroupCode [VARCHAR](20) AS\nBEGIN\n\nSELECT\td.[DataSetType], \n\t\tDBServerName=C.[ConnectionString],\n\t\tDBName=C.[ConnectionName],\n\t\tSQLKVName=C.[ConnectionKVSecret]\n\t\t,SqlUserName=C.[ConnetionUserName]\n       ,[DataSetName]\n      ,[SchemaName]\n      ,DLContainer='metadata'\n\t  ,DLFolder='inbound'\n\t  ,DLFileName=LOWER(CONCAT(D.[SchemaName],'_',D.[DataSetName]))\n      ,SQLQuery=\tME_Config.fnGetRMDBSQuery(\n\t\t\t\t\tCONVERT(VARCHAR(20),D.id), \n\t\t\t\t\tCONVERT(VARCHAR(250),D.DataSetName),\n\t\t\t\t\tCONVERT(VARCHAR(250),D.SchemaName), \n\t\t\t\t\tCONVERT(VARCHAR(100),D.DataSetType)\n\t\t\t\t\t)\n      \nFROM\t[ME_Config].[DataSet] D\n\t\tINNER JOIN [ME_Config].[Connection] C ON D.[ConnectionId]=C.id\n\nWHERE\tD.DataSetType=@DataSetType\n\t\tAND (D.RunGroupCode=@RunGroupCode OR @RunGroupCode='-1')\n\t\tAND D.IsEnabled < 2\n\nEND\nGO\n\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_AlterGlobals]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_AlterGlobals];\nGO\n\nCREATE PROC [ME_Config].[sp_AlterGlobals] @STORAGE_ACCOUNT [VARCHAR](4000),@STAGE_SCHEMA [VARCHAR](4000) AS\nBEGIN\n\nTRUNCATE TABLE [ME_Config].[GLOBALS]\n\nINSERT INTO [ME_Config].[GLOBALS]\nSELECT Attribute='STORAGE_ACCOUNT',AttributeValue=@STORAGE_ACCOUNT\nUNION ALL\nSELECT Attribute='STAGE_SCHEMA',AttributeValue=@STAGE_SCHEMA\n;\n\nDECLARE @SQL VARCHAR(4000)\n\nSET @SQL = 'CREATE SCHEMA ['+@STAGE_SCHEMA+']\n    AUTHORIZATION [dbo];'\n\n\nEXEC (@SQL)\n\n\n\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_GENERATE_DynamicRMDBS_discoverSQL]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_GENERATE_DynamicRMDBS_discoverSQL];\nGO\n\nCREATE PROC [ME_Config].[sp_GENERATE_DynamicRMDBS_discoverSQL] AS\nBEGIN\n  SELECT SQLQuery     = [ME_Config].[fnGetConfigurationSQLQuery](C.[Connectiontype], C.[Id]),\n         DataSetType  = C.Connectiontype, \n         DBServerName = C.[ConnectionString],\n         DBName       = C.[ConnectionName],\n         SQLKVName    = C.[ConnectionKVSecret],\n         SqlUserName  = C.[ConnetionUserName],\n         DLContainer  = 'metadata',\n         DLFolder     = 'me_config_dataset',\n         DLFileName   = LOWER(CONCAT(C.[ConnectionName], '_', C.[ConnectionKVSecret]))\n    FROM [ME_Config].[Connection] C\n   Where C.[id] not in (SELECT [ConnectionId] From [ME_Config].[DataSet]) and\n         C.[Connectiontype] IN ('MSSQL','MYSQL','AzMYSQL', 'ORACLE')\nEND\n\n\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_insertActivityEvent]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_insertActivityEvent];\nGO\nCREATE PROC [ME_Config].[sp_insertActivityEvent] @EventSource [varchar](50),@EventSourceID [varchar](100),@EventActivityName [varchar](100),@EventMessage [varchar](1000) AS\nBEGIN\nDECLARE @UTCDATE AS DATETIME\nSET @UTCDATE =  getUTCDATE()\n\nINSERT INTO [ME_Config].[ActivityLog]\n           ([EventSource]\n           ,[EventSourceID]\n           ,[EventActivityName]\n           ,[EventUTCTimestamp]\n           ,[EventMessage])\n     VALUES\n           (@EventSource,\n           @EventSourceID,\n           @EventActivityName,\n           @UTCDATE,\n           @EventMessage\n\t\t   )\nEND\nGO\n\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Config].[sp_LoadPrimeMetadata]') AND TYPE = 'P ') DROP PROC [ME_Config].[sp_LoadPrimeMetadata];\nGO\nCREATE PROC [ME_Config].[sp_LoadPrimeMetadata] AS\nBEGIN\n\t/*DEBUG\n\t\tSET @PARTITIONSTRING='2021/01/07/15/23'\n\t\tSET @DatasetID=25\n*/\n\t/*DECLARE GLOBALS*/\n\tDECLARE @STORAGE_ACCOUNT VARCHAR(500)\n\t\n\t\n\t/*SET GLOBAL PARAMETERS*/\n\tSET @STORAGE_ACCOUNT =(SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STORAGE_ACCOUNT')\n\n\t/*DECLARE LOCAL PARAMETERS*/\n\tDECLARE @SQLCOPYINTO VARCHAR(MAX);\n\tDECLARE @SourceConnnectionName VARCHAR(250)\n\t\n\n\t/*Get Source Database / Connection Name for use in target table name*/\n\tSET @SourceConnnectionName = ('https://'+@STORAGE_ACCOUNT+'.dfs.core.windows.net/metadata/me_config_dataset/*.parquet')\n\t\n\n\n\t/*Ensure Stage schema exists as defined in MF_Config.Globals*/\n\t\n\t/*Build out main metadata for dynamic SQL*/\n\n/*Build out Copy Into Statement*/\n\tSET @SQLCOPYINTO = (REPLACE('COPY INTO dbo.tbdxxxxx\n(DataSetType 1, RunGroupCode 2, DataSetName 3, SchemaName 4, TargetLake 5, ConnectionId 6, IsEnabled 7)\n  \n  FROM  ¬'+@SourceConnnectionName+ '¬\n  WITH\n(\n\tFILE_TYPE = ¬PARQUET¬\n\t,MAXERRORS = 0\n\t\t,COMPRESSION = ¬snappy¬\n\t,IDENTITY_INSERT = ¬OFF¬\n)\n\n  ', '¬', '''')\n\t\t\n\t\t\t)\n\t\n\t/*Build Out Drop and Recreate of StageTable*/\n\tPRINT @SQLCOPYINTO\n\n\nBEGIN TRY DROP TABLE dbo.tbdxxxxx END TRY BEGIN CATCH PRINT 'x' END CATCH\nIF NOT EXISTS (SELECT * FROM sys.objects WHERE NAME = 'tbdxxxxx' AND TYPE = 'U')\nCREATE TABLE dbo.tbdxxxxx\n\t(\n\t\t [DataSetType] nvarchar(4000),\n\t [RunGroupCode] nvarchar(4000),\n\t [DataSetName] nvarchar(4000),\n\t [SchemaName] nvarchar(4000),\n\t [TargetLake] nvarchar(4000),\n\t [ConnectionId] nvarchar(4000),\n\t [IsEnabled] int\n\t)\nWITH\n\t(\n\tDISTRIBUTION = ROUND_ROBIN,\n\t CLUSTERED COLUMNSTORE INDEX\n\t\n\t);\n\n\tEXEC (@SQLCOPYINTO)\n\n\tINSERT INTO [ME_Config].[DataSet]([DataSetType]\n      ,[RunGroupCode]\n      ,[DataSetName]\n      ,[SchemaName]\n      ,[TargetLake]\n      ,[ConnectionId]\n      ,[IsEnabled])\n\t\tSELECT * FROM dbo.tbdxxxxx;\nDROP TABLE dbo.tbdxxxxx\n\n\n\t\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Data].[sp_ADFGetSQLConfig]') AND TYPE = 'P ') DROP PROC [ME_Data].[sp_ADFGetSQLConfig];\nGO\nCREATE PROC [ME_Data].[sp_ADFGetSQLConfig] @DataSetType [VARCHAR](100),@RunGroupCode [VARCHAR](20) AS\nBEGIN\n\nSELECT\td.[DataSetType], \n\t\tDBServerName=C.[ConnectionString],\n\t\tDBName=C.[ConnectionName],\n\t\tSQLKVName=C.[ConnectionKVSecret]\n\t\t,SqlUserName=C.[ConnectionKVSecret]\n       ,D.[DataSetName]\n      ,D.[SchemaName]\n      ,DLContainer=LOWER(E.TargetLake)\n\t  ,DLFolder=LOWER(E.LakeFolder)\n\t  ,DLFileName=LOWER(CONCAT(D.[SchemaName],'_',D.[DataSetName]))\n      ,SQLQuery=CONVERT(NVARCHAR(MAX),'SELECT '+COLS.Cols/*[ME_Config].[fnGetRMDBSQuerySelectColumnNames](E.Id)*/+' FROM ['+E.[SchemaName]+'].['+E.[Name]+']')\n      \nFROM\t[ME_Config].[DataSet] D\n\t\tINNER JOIN [ME_Config].[Connection] C ON D.[ConnectionId]=C.id\n\t\tINNER JOIN Metadata.Entity E ON D.Id=E.DatasetId AND D.[IsEnabled]=1\n\t\tINNER JOIN (   \n\t\t\t\t\tSELECT Cols=CONVERT(NVARCHAR(MAX),(ISNULL\t(\n\t\t\t\t\t\tSTRING_AGG('['+REPLACE([MetadataObjectName],' ','_')+']=['+[MetadataObjectName]+']',',')\n\t\t\t\t\t\tWITHIN GROUP ( ORDER BY [MetadataObjectOrder]  ASC  )\n\t\t\t\t\t\t,'*'\n\t\t\t\t\t\t))),EntityID\n\t\t\t\t\tFROM MEtadata.[object] \n\t\t\t\t\tWhere EntityID IN (\n\t\t\t\t\tSELECT DISTINCT EntityID \n\t\t\t\t\tFROM MEtadata.[object] \n\t\t\t\t\twhere [MetadataObjectName] LIKE '% %'\n\t\t\t\t\t\t\t\t\t\t) \n\t\t\t\t\t\t\t\t\t\tGROUP BY EntityID\n\t\t\t\t\t \n\t\t\t\t\t) AS COLS ON COLS.EntityID=E.Id\n\nWHERE\tD.DataSetType=@DataSetType\n\t\tAND (D.RunGroupCode=@RunGroupCode OR @RunGroupCode='-1')\n\t\tAND D.IsEnabled < 2\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Data].[sp_GetDynamicMSSQLQuery]') AND TYPE = 'P ') DROP PROC [ME_Data].[sp_GetDynamicMSSQLQuery];\nGO\nCREATE PROC [ME_Data].[sp_GetDynamicMSSQLQuery] @DataSetType [VARCHAR](100),@ExecutionGroup [VARCHAR](10),@ExecutionPlane [VARCHAR](10) AS\nBEGIN\n\tDECLARE @PARTITION VARCHAR(50)\n\n\tSET @PARTITION = (\n\t\t\tSELECT REPLACE(REPLACE(REPLACE(CONVERT(VARCHAR(16), GETUTCDATE(), 120), '-', '\\'), ' ', '\\'), ':', '\\')\n\t\t\t)\n\n\tSELECT [DataSetType]\n\t\t,DBServerName\n\t\t,DBName\n\t\t,SQLKVName\n\t\t,SqlUserName\n\t\t,[DataSetName]\n\t\t,[SchemaName]\n\t\t,DLContainer\n\t\t,DLFolder = DLFolder + '\\' + @PARTITION\n\t\t,DLFileName\n\t\t,SQLQuery = CONVERT(NVARCHAR(MAX), 'SELECT ' + Cols + CASE \n\t\t\t\tWHEN [DataSetType] LIKE '%MSSQL'\n\t\t\t\t\tTHEN ' FROM [' + [SchemaName] + '].[' + [Name] + ']'\n\t\t\t\tWHEN [DataSetType] LIKE '%ORACLE'\n\t\t\t\t\tTHEN ' FROM \"' + [SchemaName] + '\".\"' + [Name] + '\"'\n\t\t\t\tELSE ' FROM `' + [SchemaName] + '`.`' + [Name] + '`'\n\t\t\t\tEND + WhereClause)\n\t\t,Cols\n\t\t,DataSetID = ID\n\t\t,[Target_Partition] = REPLACE(@PARTITION, '\\', '/')\n\tFROM (\n\t\tSELECT d.[DataSetType]\n\t\t\t,DBServerName = C.[ConnectionString]\n\t\t\t,DBName = C.[ConnectionName]\n\t\t\t,SQLKVName = C.[ConnectionKVSecret]\n\t\t\t,SqlUserName = C.[ConnetionUserName]\n\t\t\t,D.[DataSetName]\n\t\t\t,D.[SchemaName]\n\t\t\t,DLContainer = LOWER(E.TargetLake)\n\t\t\t,DLFolder = LOWER(E.LakeFolder)\n\t\t\t,DLFileName = LOWER(CONCAT (\n\t\t\t\t\tD.[SchemaName]\n\t\t\t\t\t,'_'\n\t\t\t\t\t,D.[DataSetName]\n\t\t\t\t\t))\n\t\t\t,E.[Name]\n\t\t\t,D.ID\n\t\t\t--\n\t\t\t,Cols = CONVERT(NVARCHAR(MAX), (\n\t\t\t\t\tISNULL(STRING_AGG((\n\t\t\t\t\t\t\t\tCASE \n\t\t\t\t\t\t\t\t\tWHEN d.[DataSetType] = 'MSSQL'\n\t\t\t\t\t\t\t\t\t\tTHEN '[' + o.[MetadataObjectName] + ']  AS [' + REPLACE(o.[MetadataObjectName], ' ', '_') + ']'\n\t\t\t\t\t\t\t\t\tWHEN d.[DataSetType] = 'ORACLE'\n\t\t\t\t\t\t\t\t\t\tTHEN '\"' + o.[MetadataObjectName] + '\"  AS \"' + REPLACE(o.[MetadataObjectName], ' ', '_') + '\"'\n\t\t\t\t\t\t\t\t\tELSE '`' + o.[MetadataObjectName] + '`  AS `' + REPLACE(o.[MetadataObjectName], ' ', '_') + '`'\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\t\t\t), ',') WITHIN GROUP (\n\t\t\t\t\t\t\tORDER BY o.[MetadataObjectOrder] ASC\n\t\t\t\t\t\t\t), '*')\n\t\t\t\t\t))\n\t\t\t,WhereClause = CASE \n\t\t\t\tWHEN DC.EntityID IS NULL\n\t\t\t\t\tTHEN ''\n\t\t\t\tELSE CONCAT (\n\t\t\t\t\t\t' Where '\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereCol\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereOperator\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.wherevalue\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t)\n\t\t\t\tEND\n\t\t--SELECT *\n\t\tFROM [Metadata].[Entity] E\n\t\tINNER JOIN [ME_Config].[DataSet] D ON D.id = e.datasetid\n\t\t\tAND D.[IsEnabled] = 1\n\t\t\tAND d.[DataSetType] LIKE @DataSetType\n\t\tINNER JOIN [ME_Config].[Connection] C ON D.CONNECTIONID = C.ID\n\t\tINNER JOIN [Metadata].[Object] o ON o.EntityID = E.id\n\t\tLEFT OUTER JOIN Metadata.DeltaConfig DC ON DC.EntityID = E.id\n\t\tGROUP BY d.[DataSetType]\n\t\t\t,C.[ConnectionString]\n\t\t\t,C.[ConnectionName]\n\t\t\t,C.[ConnectionKVSecret]\n\t\t\t,C.[ConnectionKVSecret]\n\t\t\t,D.[DataSetName]\n\t\t\t,D.[SchemaName]\n\t\t\t,LOWER(E.TargetLake)\n\t\t\t,LOWER(E.LakeFolder)\n\t\t\t,LOWER(CONCAT (\n\t\t\t\t\tD.[SchemaName]\n\t\t\t\t\t,'_'\n\t\t\t\t\t,D.[DataSetName]\n\t\t\t\t\t))\n\t\t\t,E.[Name]\n\t\t\t,D.ID\n\t\t\t,C.[ConnetionUserName]\n\t\t\t,CASE \n\t\t\t\tWHEN DC.EntityID IS NULL\n\t\t\t\t\tTHEN ''\n\t\t\t\tELSE CONCAT (\n\t\t\t\t\t\t' Where '\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereCol\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.WhereOperator\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t,DC.wherevalue\n\t\t\t\t\t\t,' '\n\t\t\t\t\t\t)\n\t\t\t\tEND\n\t\t) AS X\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Data].[sp_ProcessDynamicStagedMetadata]') AND TYPE = 'P ') DROP PROC [ME_Data].[sp_ProcessDynamicStagedMetadata];\nGO\n\nCREATE PROC [ME_Data].[sp_ProcessDynamicStagedMetadata] @DataSetType [VARCHAR](100) AS\nBEGIN\n--Initial Reset... \nBEGIN TRY \nDROP TABLE #TTAttribute\nDROP TABLE #TTBase\nDROP TABLE #TTOBJECT\nDROP TABLE #TTEntity\nDROP TABLE #Attribute\nDROP TABLE #OBJECT\nDROP TABLE #Entity\nEND TRY\nBEGIN CATCH\nPRINT 'Seems as if the temp tables were not there :)'\nEND CATCH\n\n\n\n\n--Lock In Reslults\nSELECT [MetadataQuerySource]\n      ,[MetadataEntityName]\n      ,[MetadataSchemaName]\n      ,[MetadataObjectName]\n      ,[MetadataObjectType]\n      ,[MetadataObjectlength]\n      ,[MetadataObjectPrecision]\n      ,[MetadataObjectScale]\n      ,[MetadataObjectCollation]\n      ,[DataSetID]\n      ,[MetadataObjectOrder]\n      ,[MetadataObjectIdentityFlag]\n      ,[MetadataObjectRefreshUTCTimeStamp]\n\n\t  ,MetadataObjectHash=CONVERT(BIGINT,HASHBYTES('SHA1',CONCAT([DataSetID],'¬'\n      ,[MetadataObjectName])))\n\t   \n\tINTO #TTBase\n\t--SELECT *\n  FROM [ME_Data].[MetadataEntityStage]\n  WHERE [MetadataQuerySource]='Dynamic' \n\t\tAND DATASETID IN\t(\n\t\t\t\t\t\t\tSELECT id \n\t\t\t\t\t\t\tfrom [ME_Config].[DataSet] \n\t\t\t\t\t\t--\twhere @DataSetType=DataSetType\n\t\t\t\t\t\t\t)\n\n--Get All Distinct Entities\n--DROP TABLE #TTEntity\nSELECT DISTINCT [DataSetID],[MetadataEntityName]\n      ,[MetadataSchemaName]\nINTO #TTEntity\nFROM #TTBase\n\n--Build Up Objects\nSELECT [DataSetID]\n      ,[MetadataObjectName]\n\t  ,[MetadataObjectOrder]\n\t  ,MetadataObjectHash\n\t  ,[MetadataObjectRefreshUTCTimeStamp]=MAX([MetadataObjectRefreshUTCTimeStamp])\nINTO #TTOBJECT\nFROM #TTBase\nGROUP BY [DataSetID]\n      ,[MetadataObjectName]\n\t  ,MetadataObjectHash\n\t  ,[MetadataObjectOrder]\n\n\n--Build Attribute KVP Table\nSELECT *\nINTO #TTAttribute\nFROM (\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataType')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),[MetadataObjectType])\n\t\t,[KeyValueDataType]=CONVERT(VARCHAR(50),'String')\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypeSize')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectlength)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypePrecision')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectPrecision)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypeScale')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectScale)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectDataTypeCollation')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectCollation)\n\t\t,[KeyValueDataType]='String'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\nWHERE ISNULL(MetadataObjectCollation,'') !=''\nUNION ALL\nSELECT\t MetadataObjectHash\n\t\t,[DataSetID]\n\t\t,[KEY]=CONVERT(VARCHAR(100),'ObjectIdentityFlag')\n\t\t,[Value]=CONVERT(NVARCHAR(4000),MetadataObjectIdentityFlag)\n\t\t,[KeyValueDataType]='Int'\n\t\t,[KeyValueRefreshDate]=[MetadataObjectRefreshUTCTimeStamp]\nFROM #TTBase\n) X\n\n\n\nSELECT E.*,D.TargetLake,LakeFolder=CONCAT(D.id\n\t\t\t\t\t\t\t\t,'\\'\n\t\t\t\t\t\t\t\t,D.DataSetType\n\t\t\t\t\t\t\t\t,'\\'\n\t\t\t\t\t\t\t\t,E.[MetadataSchemaName]\n\t\t\t\t\t\t\t\t,'\\'\n\t\t\t\t\t\t\t\t,E.[MetadataEntityName]) \n\t\t,RecordProcessTimestamp=GETUTCDATE()\nINTO #Entity\nFROM #TTEntity E\nINNER JOIN [ME_Config].[DataSet] D ON D.id=E.DataSetID\n\nSELECT * ,RecordProcessTimestamp=GETUTCDATE()\nINTO #Object\nFROM #TTOBJECT\n\nSELECT * ,RecordProcessTimestamp=GETUTCDATE()\nINTO #Attribute\nFROM #TTAttribute\n\n\n--Update Metadata.Entity table\nUPDATE t\nSET \n       t.[Name]=s.[MetadataEntityName]\n      ,t.[SchemaName]=s.[MetadataSchemaName]\n      ,t.[TargetLake]=s.[TargetLake]\n      ,t.[LakeFolder]=s.[LakeFolder]\n      ,t.[RecordProcessTimestamp]=s.[RecordProcessTimestamp]\nFROM [Metadata].[Entity] t \nINNER JOIN  #Entity s ON s.[DataSetId] = t.[DataSetId]\n\n\n\tINSERT INTO [Metadata].[Entity] ([DataSetId]\n      ,[Name]\n      ,[SchemaName]\n      ,[TargetLake]\n      ,[LakeFolder]\n      ,[RecordProcessTimestamp]\n\t  ,CreatedUTCTimestamp)\n\t  SELECT DISTINCT s.[DataSetId]\n      ,s.[MetadataEntityName]\n      ,s.[MetadataSchemaName]\n      ,s.[TargetLake]\n      ,s.[LakeFolder]\n      ,s.[RecordProcessTimestamp]\n\t  ,CreatedUTCTimestamp=GETUTCDATE()\n\t  FROM #Entity s \n\t  LEFT OUTER JOIN  [Metadata].[Entity] t\n\t  ON s.[DataSetId] = t.[DataSetId]\n\t  WHERE t.[DataSetId] IS NULL\n\t;\n\n\n\t\n\n--Update Metadata Object Table \n\nUPDATE t\nSET \n        t.[MetadataObjectOrder]\t\t=s.[MetadataObjectOrder]\n       ,t.[RecordProcessTimestamp]\t=s.[RecordProcessTimestamp]\nFROM [Metadata].[Object] t \nINNER JOIN  (\n\t\t\tSELECT o.*, [EntityId]=E.id \n\t\t\tFROM #Object o \n\t\t\tINNER JOIN [Metadata].[Entity] E \n\t\t\tON E.[DataSetId]=o.[DataSetId]\n\t\t\t) s ON s.[MetadataObjectHash] = t.[MetadataObjectHash];\n\nINSERT INTO [Metadata].[Object]([EntityId]\n\t\t\t\t,[DataSetID]\n\t\t\t\t,[MetadataObjectName]\n\t\t\t\t,[MetadataObjectOrder]\n\t\t\t\t,[MetadataObjectHash]\n\t\t\t\t,[MetadataObjectRefreshUTCTimeStamp]\n\t\t\t\t,[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp\n\t\t\t\t)\n         SELECT s.[EntityId]\n\t\t\t\t,s.[DataSetID]\n\t\t\t\t,s.[MetadataObjectName]\n\t\t\t\t,s.[MetadataObjectOrder]\n\t\t\t\t,s.[MetadataObjectHash]\n\t\t\t\t,s.[MetadataObjectRefreshUTCTimeStamp]\n\t\t\t\t,s.[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp=GETUTCDATE()\n\tFROM   (\n\t\t\tSELECT o.*, [EntityId]=E.id \n\t\t\tFROM #Object o \n\t\t\tINNER JOIN [Metadata].[Entity] E \n\t\t\tON E.[DataSetId]=o.[DataSetId]\n\t\t\t) s \n\tWHERE s.[MetadataObjectHash] NOT IN (SELECT [MetadataObjectHash] FROM [Metadata].[Object] WITH (NOLOCK))\n\t\n\n\n\n\n--Update Metadata Attribute Table \n\nUPDATE t\nSET \n        t.[Value]=s.[Value]\n       ,t.[KeyValueRefreshDate]=s.[KeyValueRefreshDate]\n       ,t.[RecordProcessTimestamp]\t=s.[RecordProcessTimestamp]\nFROM [Metadata].[Attribute] t \nINNER JOIN  (\n\t\t\tSELECT o.*, [EntityId]=E.[EntityId] ,[ObjectId]=E.[Id] \n\t\t\tFROM #Attribute o \n\t\t\tINNER JOIN [Metadata].[Object] E \n\t\t\tON E.[MetadataObjectHash]=o.[MetadataObjectHash]\n\t\t\t) s ON (s.[MetadataObjectHash] = t.[MetadataObjectHash] and S.[Key]=T.[Key]);\n\n\nINSERT INTO [Metadata].[Attribute] ([EntityId]\n\t\t\t\t,[ObjectId]\n\t\t\t\t,[MetadataObjectHash]\n\t\t\t\t,[DataSetID]\n\t\t\t\t,[KEY]\n\t\t\t\t,[Value]\n\t\t\t\t,[KeyValueDataType]\n\t\t\t\t,[KeyValueRefreshDate]\n\t\t\t\t,[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp\n\t\t\t\t)\n\t\t\tSELECT s.[EntityId]\n\t\t\t\t,s.[ObjectId]\n\t\t\t\t,s.[MetadataObjectHash]\n\t\t\t\t,s.[DataSetID]\n\t\t\t\t,s.[KEY]\n\t\t\t\t,s.[Value]\n\t\t\t\t,s.[KeyValueDataType]\n\t\t\t\t,s.[KeyValueRefreshDate]\n\t\t\t\t,s.[RecordProcessTimestamp]\n\t\t\t\t,CreatedUTCTimestamp=GETUTCDATE()\n\t\t\tFROM \n\t\t\t(\n\t\t\t\tSELECT o.*, [EntityId]=E.[EntityId] ,[ObjectId]=E.[Id] \n\t\t\t\tFROM #Attribute o \n\t\t\t\tINNER JOIN [Metadata].[Object] E \n\t\t\t\tON E.[MetadataObjectHash]=o.[MetadataObjectHash]\n\t\t\t) s \n\t\t\tLEFT OUTER JOIN [Metadata].[Attribute]  t ON s.[MetadataObjectHash] = t.[MetadataObjectHash] and S.[Key]=T.[Key] \n\t\t\tWHERE t.[MetadataObjectHash] IS NULL;\n\n--Purge stage table of data\nDELETE  FROM [ME_Data].[MetadataEntityStage]\nWHERE CONVERT(BIGINT,HASHBYTES('SHA1',CONCAT([DataSetID],'¬'\n      ,[MetadataObjectName]))) IN (SELECT DISTINCT MetadataObjectHash FROM #TTBase)\n--Cleanup\nDROP TABLE #TTAttribute\nDROP TABLE #TTBase\nDROP TABLE #TTOBJECT\nDROP TABLE #TTEntity\nDROP TABLE #Attribute\nDROP TABLE #OBJECT\nDROP TABLE #Entity\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[InsertDataStageEntry]') AND TYPE = 'P ') DROP PROC [ME_Stage].[InsertDataStageEntry];\nGO\n\nCREATE PROC [ME_Stage].[InsertDataStageEntry] @Partition_String [VARCHAR](100),@DatasetID [INT],@Row_Count [BIGINT] AS \nBEGIN\n\nINSERT INTO  ME_Stage.RawPartitionStage\n\t\t\t(\n\t\t\tDatasetID,\tPartition_String,\tRow_Count,\tInsertTimestamp\n\t\t\t)\nSELECT\t\t@DatasetID,\t@Partition_String,\t@Row_Count,\tGETUTCDATE()\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_DynamicStageLoad]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_DynamicStageLoad];\nGO\n\nCREATE PROC [ME_Stage].[sp_DynamicStageLoad] @PARTITIONSTRING [VARCHAR](100),@DatasetID [INT] AS\nBEGIN\n\t/*DEBUG\n\t\tSET @PARTITIONSTRING='2021/01/07/15/23'\n\t\tSET @DatasetID=25\n*/\n\t/*DECLARE GLOBALS*/\n\tDECLARE @TARGETSCHEMA VARCHAR(100)\n\t\t,@STORAGE_ACCOUNT VARCHAR(500)\n\t\n\t\n\t/*SET GLOBAL PARAMETERS*/\n\tSET @STORAGE_ACCOUNT =(SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STORAGE_ACCOUNT')\n\tSET @TARGETSCHEMA = (SELECT TOP 1 AttributeValue\tFROM ME_Config.GLOBALS WHERE [Attribute]='STAGE_SCHEMA')\n\n\t/*DECLARE LOCAL PARAMETERS*/\n\tDECLARE @SQLCREATESTAGETABLE VARCHAR(MAX);\n\tDECLARE @SQLCOPYINTO VARCHAR(MAX);\n\tDECLARE @SQLSCHEMACREATE VARCHAR(MAX);\n\tDECLARE @SourceConnnectionName VARCHAR(250)\n\t\n\n\t/*Get Source Database / Connection Name for use in target table name*/\n\tSET @SourceConnnectionName = (\n\t\t\tSELECT TOP 1 [ConnectionName]\n\t\t\tFROM ME_CONFIG.Connection c\n\t\t\tINNER JOIN ME_Config.Dataset D ON D.ConnectionID = C.ID\n\t\t\t\tAND D.ID = @DatasetID\n\t\t\t)\n\t\n\n\n\t/*Ensure Stage schema exists as defined in MF_Config.Globals*/\n\tSET @SQLSCHEMACREATE = (SELECT REPLACE('BEGIN TRY DECLARE @X AS VARCHAR(4000) SET @X=¬CREATE SCHEMA '+@TARGETSCHEMA+' AUTHORIZATION dbo¬ EXEC (@X) END TRY BEGIN CATCH PRINT 1 END CATCH' ,'¬',''''))\n\t/*Flush Out Temp Tables*/\n\t\n\tBEGIN TRY\n\t\tDROP TABLE #TTBaseData\n\tEND TRY\n\n\tBEGIN CATCH\n\t\tPRINT 1\n\tEND CATCH\n\t\n\t/*Build out main metadata for dynamic SQL*/\n\n\tSELECT DISTINCT o.[Id]\n\t\t,o.[EntityId]\n\t\t,o.[DataSetID]\n\t\t,o.[MetadataObjectName]\n\t\t,o.[MetadataObjectOrder]\n\t\t,o.[MetadataObjectHash]\n\t\t,o.[MetadataObjectRefreshUTCTimeStamp]\n\t\t,o.[RecordProcessTimestamp]\n\t\t,o.[CreatedUTCTimestamp]\n\t\t,e.[TargetLake]\n\t\t,e.[LakeFolder]\n\t\t,e.[SchemaName]\n\t\t,EntityName = e.[Name]\n\t\t,[ObjectDataType] = DT.[Value]\n\t\t,[ObjectDataTypeSize] = DTL.[Value]\n\t\t,[ObjectDataTypePrecision] = DTP.[Value]\n\t\t,[ObjectDataTypeScale] = DTPS.[Value]\n\t\t,DATATYPE = [ME_Config].[fnGetDatatypedeff](DS.[DataSetType], DT.[Value], DTL.[Value], DTP.[Value], DTPS.[Value])\n\tINTO #TTBaseData\n\tFROM [Metadata].[Object] O\n\tINNER JOIN [ME_Config].[DataSet] DS ON O.DataSetId = DS.ID\n\tINNER JOIN Metadata.Entity E ON O.EntityId = E.id\n\t\tAND E.DatasetId = @DatasetID\n\tINNER JOIN [Metadata].[Attribute] DT ON o.id = DT.ObjectID\n\t\tAND DT.EntityId = E.id\n\t\tAND DT.[KEY] = 'ObjectDataType'\n\tINNER JOIN [Metadata].[Attribute] DTL ON o.id = DTL.ObjectID\n\t\tAND DTL.EntityId = E.id\n\t\tAND DTL.[KEY] = 'ObjectDataTypeSize'\n\tINNER JOIN [Metadata].[Attribute] DTP ON o.id = DTP.ObjectID\n\t\tAND DTP.EntityId = E.id\n\t\tAND DTP.[KEY] = 'ObjectDataTypePrecision'\n\tINNER JOIN [Metadata].[Attribute] DTPS ON o.id = DTPS.ObjectID\n\t\tAND DTP.EntityId = E.id\n\t\tAND DTPS.[KEY] = 'ObjectDataTypeScale'\n\n/*Build out Copy Into Statement*/\n\tSET @SQLCOPYINTO = (\n\t\t\tSELECT TOP 1 REPLACE('COPY INTO [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + ']\n  \n  FROM  ¬https://' + @STORAGE_ACCOUNT + '.dfs.core.windows.net/' + LOWER([TargetLake]) + CASE WHEN LEN([LakeFolder])=0 THEN '' ELSE '/' END + LOWER(REPLACE([LakeFolder], '\\', '/')) + CASE WHEN LEN(@PARTITIONSTRING)=0 THEN'' ELSE '/' END + LOWER(REPLACE(@PARTITIONSTRING, '\\', '/')) + '/*.parquet¬\n  WITH\n(\n\tFILE_TYPE = ¬PARQUET¬\n\t,MAXERRORS = 0\n\t,COMPRESSION = ¬snappy¬\n\t,IDENTITY_INSERT = ¬OFF¬\n)\n\n  ', '¬', '''')\n\t\t\tFROM #TTBaseData\n\t\t\t)\n\t\n\t/*Build Out Drop and Recreate of StageTable*/\n\tSET @SQLCREATESTAGETABLE = (\n\t\t\tSELECT 'BEGIN TRY DROP TABLE [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + '] END TRY BEGIN CATCH PRINT 1 END CATCH \n\t\tCREATE TABLE [' + @TARGETSCHEMA + '].[' + @SourceConnnectionName + '_' + SchemaName + '_' + EntityName + '] \n\t\t( \n\t\t' + CONVERT(NVARCHAR(MAX), (\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\tSTRING_AGG('[' + o.[MetadataObjectName] + '] ' + o.[DATATYPE] + ' ', ',') WITHIN GROUP (\n\t\t\t\t\t\t\t\t\tORDER BY o.[MetadataObjectOrder] ASC\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)) + ') WITH\n\t\t\t(\n\t\t\tDISTRIBUTION = ROUND_ROBIN,\n\t\t\t/*CLUSTERED COLUMNSTORE INDEX*/\n\t  \t\tHEAP\n\t\t\t)\n\t\t\t\n\t\t\t'\n\t\t\tFROM #TTBaseData o\n\t\t\tGROUP BY SchemaName\n\t\t\t\t,EntityName\n\t\t\t)\n\n\n/*Execute Dynamic SQL in sequence*/\n\n\n\tPRINT 'Creating Stage Table'\nprint @SQLCREATESTAGETABLE\n\tEXEC (@SQLCREATESTAGETABLE)\n\n\tPRINT 'Loading Stage Table'\n\n\tEXEC (@SQLCOPYINTO)\n\n\tBEGIN TRY\n\t\tDROP TABLE #TTBaseData\n\tEND TRY\n\n\tBEGIN CATCH\n\t\tPRINT 1\n\tEND CATCH\n\n\tEXEC ME_Stage.sp_ProcessLiveData @DatasetID\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_GetStagePartitions]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_GetStagePartitions];\nGO\n\nCREATE PROC [ME_Stage].[sp_GetStagePartitions] AS\nBEGIN\nSELECT [Id]\n      ,[DatasetID]\n      ,[Partition_String]\n      ,[Row_Count]\n      ,[InsertTimestamp]\n      ,[Status]\n  FROM [ME_Stage].[RawPartitionStage]\n\n  WHERE STATUS=0\n  ORDER BY [InsertTimestamp]\n\n  END\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_ProcessLiveData]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_ProcessLiveData];\nGO\n\nCREATE PROC [ME_Stage].[sp_ProcessLiveData] @DATASETID [INT] AS\nBEGIN\n\n/*GLOBALS*/\n  DECLARE\t@PARTITIONID\tINT, \n\t\t\t@STAGECOLS\t\tVARCHAR(MAX), \n\t\t\t@LIVECOLS\t\tVARCHAR(MAX), \n\t\t\t@BUSINESSKEY\tVARCHAR(100), \n\t\t\t@STAGETABLE\t\tVARCHAR(1000), \n\t\t\t@LIVETABLE\t\tVARCHAR(1000), \n\t\t\t@PARTITIONNAME\tVARCHAR(255),\n\t\t\t@STAGESCHEMA\tVARCHAR(200), \n\t\t\t@LIVESCHEMA\t\tVARCHAR(200),\n\t\t\t@HASDELTA\t\tINT,\n\t\t\t@TABLE_ACTION\tVARCHAR(10), \n\t\t\t@TARGET_DIST\tVARCHAR(1000)\n--ENTITYROWIDENTIFIER\n--ENTITYDELTACOLUMN\n--ENTITYDELTAOPERATOR\n--ENTITYDELTAVALUE\n--598#\n--TRUNCATE TABLE [ME_STAGE].[RAWPARTITIONSTAGE]\n  --SELECT * FROM [ME_STAGE].[RAWPARTITIONSTAGE]\n/*SET GLABAL VARIABLES*/\n  SET @PARTITIONID = (SELECT TOP 1 ID \n\t\t\t\t\t  FROM [ME_STAGE].[RAWPARTITIONSTAGE]\n\t\t\t\t\t  WHERE DATASETID=@DATASETID AND [STATUS] = 1\n\t\t\t\t\t  ORDER BY INSERTTIMESTAMP ASC\n\t\t\t\t\t  )\nSET @PARTITIONNAME = (SELECT TOP 1 Partition_String \n\t\t\t\t\t  FROM [ME_STAGE].[RAWPARTITIONSTAGE]\n\t\t\t\t\t  WHERE DATASETID=@DATASETID AND [STATUS] = 1\n\t\t\t\t\t  ORDER BY INSERTTIMESTAMP DESC)\nSET @STAGESCHEMA\t= (SELECT ATTRIBUTEVALUE FROM [ME_CONFIG].[GLOBALS] WHERE ATTRIBUTE ='STAGE_SCHEMA')\nSET @LIVESCHEMA\t\t= (SELECT TOP 1 C.CONNECTIONNAME +'_'+ D.SCHEMANAME FROM ME_CONFIG.CONNECTION C INNER JOIN ME_CONFIG.DATASET D ON C.ID=D.CONNECTIONID AND D.ID=@DATASETID)\nSET @LIVETABLE\t\t= (SELECT TOP 1 D.DATASETNAME FROM ME_CONFIG.CONNECTION C INNER JOIN ME_CONFIG.DATASET D ON C.ID=D.CONNECTIONID AND D.ID=@DATASETID)\nSET @STAGETABLE\t\t= (@LIVESCHEMA+'_'+@LIVETABLE)\nSET @BUSINESSKEY\t= (SELECT STRING_AGG('[' + [Value] + ']', ',') WITHIN GROUP (ORDER BY CreatedUTCTimestamp ASC) FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='EntityRowIdentifier')\nSET @HASDELTA\t\t= (SELECT COUNT(1) FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='ENTITYDELTACOLUMN')\nSET @TARGET_DIST\t= (SELECT [Value] FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='ENTITY_MPP_DIST')\n\nSET @TABLE_ACTION\t= (SELECT CASE\tWHEN @PARTITIONID IS NOT NULL THEN \n\t\t\t\t\t\t\t\t\tCASE\tWHEN @BUSINESSKEY IS NULL\t\tAND @HASDELTA\t<1\tTHEN 'D_CTAS' /*DROP AND RELOAD NO BUSINESS KEY AND NO DELTA CONFIG*/\n\t\t\t\t\t\t\t\t\t\t\tWHEN @BUSINESSKEY IS  NULL\t\tAND @HASDELTA\t>=1\tTHEN 'INSERT' /*INCREMENTAL INSERT ASSUME DELTA IS ACCURATE FROM SOURCE*/\n\t\t\t\t\t\t\t\t\t\t\tWHEN @BUSINESSKEY IS  NOT NULL\tAND @HASDELTA\t< 1\tTHEN 'BKISRT' /*INCREMENTAL INSERT FILTER WITH BUSINESS KEY*/\n\t\t\t\t\t\t\t\t\t\t\tWHEN @BUSINESSKEY IS NOT NULL\tAND @HASDELTA\t>=1 THEN 'U_CTAS' /*UPSERT USING CTAS AND RENAME OBJECT PROCESS*/\n\t\t\t\t\t\t\t\t\tEND\n\t\t\t\t\t\tELSE 'EXIT' END);\n\n/*DYNAMIC SQL VARIABLES*/\nDECLARE @LIVEINSERTSQL VARCHAR(MAX), @SCHEMASQL VARCHAR(MAX), @RENAMESQL VARCHAR(MAX)\n\n/*BUILD COLUMN SCHEMA*/\nSET @STAGECOLS = (SELECT STRING_AGG('[' + COLUMN_NAME + ']',',') WITHIN GROUP (ORDER BY ORDINAL_POSITION ASC) FROM INFORMATION_SCHEMA.COLUMNS\tWHERE TABLE_NAME= @STAGETABLE AND TABLE_SCHEMA=@STAGESCHEMA)\n\n\t\t\t\t\t\t\n\n/*BUILD DYNAMIC SQL*/\n\nSET @SCHEMASQL = 'CREATE SCHEMA '+@LIVESCHEMA+' AUTHORIZATION dbo'\n\nIF @TABLE_ACTION = 'D_CTAS' SET @LIVEINSERTSQL =REPLACE('IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'];\n\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬) FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION = 'INSERT' SET @LIVEINSERTSQL =REPLACE('IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬ FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'] ('+@STAGECOLS+',[RAW_SRC_PARTITION])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬ FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']; \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION = 'BKISRT' SET @LIVEINSERTSQL =REPLACE('IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION\t= CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'];\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tELSE\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'] ('+@STAGECOLS+',[RAW_SRC_PARTITION],[BK_HASH_ID])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t'+@STAGECOLS+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬)))  \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) NOT IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']); \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION = 'U_CTAS' SET @LIVEINSERTSQL =REPLACE('IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]¬) AND type in (N¬U¬)) DROP TABLE ¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]¬;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*UNSEEN RECORDS*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT '+@STAGECOLS+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION\t= CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[ME_ETL_ROW_DATE] = GETUTCDATE()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'] \n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) NOT IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']);\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*UPDATED RECORDS*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tINSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW] ('+@STAGECOLS+',[RAW_SRC_PARTITION],[BK_HASH_ID],[ME_ETL_ROW_DATE])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT\t'+REPLACE(@STAGECOLS,'[','A.[')+'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[BK_HASH_ID]\t\t= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬)))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t,[ME_ETL_ROW_DATE] = GETUTCDATE()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'] A\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']); \n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE #'+@STAGETABLE+'  END TRY BEGIN CATCH PRINT 2 END CATCH;\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*GET ALL UPSERT BUSINESS KEYS*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT DISTINCT [BK_HASH_ID] INTO #'+@STAGETABLE+' FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/*GENERATE FINAL SWITCH TABLE*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]¬) AND type in (N¬U¬)) DROP TABLE ¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]¬;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAS\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tUNION ALL\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tSELECT *\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWHERE [BK_HASH_ID] NOT IN (SELECT [BK_HASH_ID] FROM #'+@STAGETABLE+');\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* CLEAN UP */\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]  END TRY BEGIN CATCH PRINT 3 END CATCH;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE #'+@STAGETABLE+'  END TRY BEGIN CATCH PRINT 2 END CATCH;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t,'¬','''');\n\nIF @TABLE_ACTION != 'EXIT' AND @TABLE_ACTION = 'U_CTAS' SET @RENAMESQL = (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tREPLACE('/*SWITCH OUT*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRENAME OBJECT ['+@LIVESCHEMA+'].['+@LIVETABLE+'] TO ['+@LIVETABLE+'_TBD]\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tRENAME OBJECT ['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH] TO ['+@LIVETABLE+']\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBEGIN TRY DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_TBD]  END TRY BEGIN CATCH PRINT 4 END CATCH;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t','¬','''')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nSELECT @LIVESCHEMA,@LIVETABLE,@TARGET_DIST,@STAGECOLS,@PARTITIONNAME,@TABLE_ACTION\n\nPRINT @SCHEMASQL\nPRINT '-----------------------------------'\nPRINT @LIVEINSERTSQL\n\n\n\nBEGIN TRY \nIF @TABLE_ACTION != 'EXIT' EXEC (@SCHEMASQL)\nEND TRY\nBEGIN CATCH\nPRINT 'Target Schema Already Exists'\nEND CATCH\n\nBEGIN TRY\nIF @TABLE_ACTION != 'EXIT' EXEC (@LIVEINSERTSQL)\n\n\nEND TRY\nBEGIN CATCH\n\tTHROW 51000,  'INSERT FAILED', 1;  \nEND CATCH\nIF @TABLE_ACTION != 'EXIT' EXEC (@RENAMESQL);\nIF @TABLE_ACTION != 'EXIT' UPDATE\t[ME_STAGE].[RAWPARTITIONSTAGE] SET [STATUS] = 2 WHERE ID =@PARTITIONID;\n\n\n\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[ME_Stage].[sp_UpdateStagePartition]') AND TYPE = 'P ') DROP PROC [ME_Stage].[sp_UpdateStagePartition];\nGO\n\nCREATE PROC [ME_Stage].[sp_UpdateStagePartition] @Partitionid [int],@State [Int] AS\nBEGIN\n\n  UPDATE [ME_Stage].[RawPartitionStage]\n  SET [Status]=@State\n\n  WHERE id =@Partitionid\n\n\n  END\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Metadata].[sp_manage_UniqueKey_Attribute]') AND TYPE = 'P ') DROP PROC [Metadata].[sp_manage_UniqueKey_Attribute];\nGO\n\nCREATE PROC [Metadata].[sp_manage_UniqueKey_Attribute] @EntityId [bigint],@RowIdColumn [VARCHAR](MAX),@ACTION [VARCHAR](10) AS\nBEGIN\n\t/*\n--DEBUG\nDECLARE @EntityId bigint , @DeltaColumn VARCHAR(MAX), @RowIdColumn VARCHAR(MAX), @DeltaOperator VARCHAR(MAX), @DeltaSeedValue VARCHAR(MAX)\n\n\nSET @EntityId = 477\nSET  @RowIdColumn = 'rowguid'\n--SET  @DeltaColumn = 'ModifiedDate'\n--SET  @DeltaOperator = '>='\n--DEBUG\n*/\n\t/*DECLARE CONSTANTS*/\n\tDECLARE @RIDKEY VARCHAR(MAX) = 'EntityRowIdentifier'\n\t/*Declare Globals*/\n\tDECLARE @DataSetID BIGINT\n\t\t,@DeltaDataType VARCHAR(MAX)\n\n\tSET @DataSetID = (\n\t\t\tSELECT DataSetID\n\t\t\tFROM [Metadata].[Entity]\n\t\t\tWHERE id = @EntityId\n\t\t\t)\n\n\t/*Flush Previous Data*/\n\tIF @ACTION = 'D'\n\t\tDELETE\n\t\tFROM [Metadata].[Attribute]\n\t\tWHERE ID IN (\n\t\t\t\tSELECT v.id\n\t\t\t\tFROM [Metadata].[Attribute] v\n\t\t\t\tWHERE v.[Key] = @RIDKEY\n\t\t\t\t\tAND v.Entityid = @EntityId\n\t\t\t\t)\n\n\tINSERT INTO [Metadata].[Attribute] (\n\t\t[EntityId]\n\t\t,[ObjectId]\n\t\t,[MetadataObjectHash]\n\t\t,[DataSetID]\n\t\t,[KEY]\n\t\t,[Value]\n\t\t,[KeyValueDataType]\n\t\t,[KeyValueRefreshDate]\n\t\t,[RecordProcessTimestamp]\n\t\t,[CreatedUTCTimestamp]\n\t\t)\n\tSELECT *\n\tFROM (\n\t\tSELECT [EntityId] = @EntityId\n\t\t\t,[ObjectId] = NULL\n\t\t\t,[MetadataObjectHash] = NULL\n\t\t\t,[DataSetID] = @DataSetID\n\t\t\t,[KEY] = @RIDKEY\n\t\t\t,[Value] = @RowIdColumn\n\t\t\t,[KeyValueDataType] = 'String'\n\t\t\t,[KeyValueRefreshDate] = getutcdate()\n\t\t\t,[RecordProcessTimestamp] = getutcdate()\n\t\t\t,[CreatedUTCTimestamp] = getutcdate()\n\t\t) AS XX\n\n\tSELECT v.*\n\tFROM [Metadata].[Attribute] v\n\tWHERE v.[Key] = @RIDKEY\n\t\tAND v.Entityid = @EntityId\nEND\nGO\n\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[Metadata].[sp_prime_Delta_Attribute]') AND TYPE = 'P ') DROP PROC [Metadata].[sp_prime_Delta_Attribute];\nGO\n\nCREATE PROC [Metadata].[sp_prime_Delta_Attribute] @EntityId [bigint],@DeltaColumn [VARCHAR](MAX),@DeltaOperator [VARCHAR](MAX),@DeltaSeedValue [VARCHAR](MAX) AS\nBEGIN\n/*\n--DEBUG\nDECLARE @EntityId bigint , @DeltaColumn VARCHAR(MAX), @RowIdColumn VARCHAR(MAX), @DeltaOperator VARCHAR(MAX), @DeltaSeedValue VARCHAR(MAX)\n\n\nSET @EntityId = 477\nSET  @RowIdColumn = 'rowguid'\nSET  @DeltaColumn = 'ModifiedDate'\nSET  @DeltaOperator = '>='\n--DEBUG\n*/\n\n/*DECLARE CONSTANTS*/\n--DECLARE @RIDKEY VARCHAR(MAX) = 'EntityRowIdentifier'\nDECLARE @DeltaColumnKEY VARCHAR(MAX) = 'EntityDeltaColumn'\nDECLARE @DeltaOperatorKEY VARCHAR(MAX) = 'EntityDeltaOperator'\nDECLARE @DeltaValueKEY VARCHAR(MAX) = 'EntityDeltaValue'\nDECLARE @DeltaValueTypeKEY VARCHAR(MAX) = 'EntityDeltaValueType'\n\n\n/*DECLARE GLOBALS*/\nDECLARE @DataSetID BIGINT, @DeltaDataType VARCHAR(MAX)\nSET @DataSetID = (SELECT DataSetID FROM [Metadata].[Entity] WHERE id=@EntityId )\n\n/*GET Metadata*/\nSET @DeltaDataType =(\nSELECT v.[Value] \nfrom [Metadata].[Attribute] v\nINNER JOIN [Metadata].[Object] o on\to.id=v.Objectid \n\t\t\t\t\t\t\t\t\tAND o.[MetadataObjectName] = @DeltaColumn and v.[Key] = 'ObjectDataType'\n\t\t\t\t\t\t\t\t\tAND v.Entityid=@EntityId\n\t\t\t\t\t\t\t\t\t)\n\nDELETE FROM [Metadata].[Attribute] \nWHERE ID IN (\nSELECT v.id \nfrom [Metadata].[Attribute] v\nWHERE  v.[Key] IN (@DeltaColumnKEY,@DeltaOperatorKEY,@DeltaValueKEY,@DeltaValueTypeKEY)\n\t\t\t\t\t\t\t\t\tAND v.Entityid=@EntityId\n)\n\t\t\t\t\t\t\t\t\t\n\nINSERT INTO [Metadata].[Attribute] \n\t\t\t([EntityId]\n\t\t\t,[ObjectId]\n\t\t\t,[MetadataObjectHash]\n\t\t\t,[DataSetID]\n\t\t\t,[KEY]\n\t\t\t,[Value]\n\t\t\t,[KeyValueDataType]\n\t\t\t,[KeyValueRefreshDate]\n\t\t\t,[RecordProcessTimestamp]\n\t\t\t,[CreatedUTCTimestamp]\n\t\t\t)\n\nSELECT * FROM (\n/*SELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @RIDKEY\n      ,[Value] = @RowIdColumn \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\nUNION ALL*/\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaColumnKEY\n      ,[Value] = @DeltaColumn\n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\nUNION ALL\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaOperatorKEY\n      ,[Value] = @DeltaOperator \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\nUNION ALL\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaValueKEY\n      ,[Value] = @DeltaSeedValue \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\n\nUNION ALL\nSELECT \n       [EntityId] = @EntityId\n      ,[ObjectId] = null\n      ,[MetadataObjectHash] = null\n      ,[DataSetID] = @DataSetID\n      ,[KEY] = @DeltaValueTypeKEY\n      ,[Value] = @DeltaDataType \n      ,[KeyValueDataType] = 'String'\n      ,[KeyValueRefreshDate] = getutcdate()\n      ,[RecordProcessTimestamp] = getutcdate()\n      ,[CreatedUTCTimestamp] = getutcdate()\n) AS XX\n\nSELECT v.* \nfrom [Metadata].[Attribute] v\nWHERE  v.[Key] IN (@DeltaColumnKEY,@DeltaOperatorKEY,@DeltaValueKEY,@DeltaValueTypeKEY)\n\t\t\t\t\t\t\t\t\tAND v.Entityid=@EntityId\n\nEND\nGO\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "mesqldw",
						"poolName": "mesqldw"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ParquetToTables')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Universal load procedue ",
				"folder": {
					"name": "Data Engineering"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "lakeprocessor",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "3",
						"spark.autotune.trackingId": "96c53b17-7031-4981-bbe5-b143b46c1ba5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/851c54e9-e549-4015-87aa-eb3e00270118/resourceGroups/PiraeusDemo_rg/providers/Microsoft.Synapse/workspaces/piraeusdemo01/bigDataPools/lakeprocessor",
						"name": "lakeprocessor",
						"type": "Spark",
						"endpoint": "https://piraeusdemo01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/lakeprocessor",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Generic Parquet file/folder to hive or SQL Pool table\r\n",
							"\r\n",
							"This is a generic data engineering pattern that reads a parquet file or collection of files and instantiate them into a hive table , Synapse SQL Pool Table or a DeltaLake Table.\r\n",
							"\r\n",
							"## This notebook assumes the folowing:\r\n",
							"\r\n",
							"- The storage account is linked and authenticated in synapse\r\n",
							"\r\n",
							"- The storage account is ADLS gen2\r\n",
							"\r\n",
							"\r\n",
							"# The notebook is driven by a set of parameters that are devided up into two catagories:\r\n",
							"\r\n",
							"## Catagory 1: Source Variables:\r\n",
							"\r\n",
							"- blob_account_name,  this is the name of your storage account \r\n",
							"- blob_container_name, this is the name of your storage container \r\n",
							"- blob_relative_path, this is your relative folder path for the parquet file(s) \r\n",
							"\r\n",
							"## Catagory 2: Target Variables:\r\n",
							"\r\n",
							"- target_db,\r\n",
							"this is the name of the target database(hive or pool) this is the target folder for deltalake tables\r\n",
							"- target_table, \r\n",
							"this is the name of the target table (hive or pool) in the case of pool this must be in the format schemaName.tableName, for delta tables this is the table name\r\n",
							"- target_type, \r\n",
							"this is the target type, can be H for Hive ,P for Pool and D for Delta Table\r\n",
							"\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"# Azure storage access info\r\n",
							"blob_account_name = 'synapsemetadataengine001' # replace with your blob name (default is NYCTaxi Dataset)\r\n",
							"blob_container_name = 'metadataengine' # replace with your container name (default is NYCTaxi Dataset)\r\n",
							"blob_relative_path = '/NYCTaxi/PassengerCountStats_parquetformat/*.parquet' # replace with your relative folder path (default is NYCTaxi Dataset)\r\n",
							"\r\n",
							"#Target Info\r\n",
							"target_db = 'taxidata' # this is the name of the target database(hive or pool) this is the target folder for deltalake tables\r\n",
							"target_table ='PassengerCountStats' # this is the name of the target table (hive or pool) in the case of pool this must be in the format schemaName.tableName, for delta tables this is the table name\r\n",
							"target_type = 'H' # this is the target type, can be H for Hive ,P for Pool and D for Delta Table\r\n",
							""
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"from delta.tables import *\r\n",
							"\r\n",
							"if target_type == 'H': \r\n",
							"    print(\"executing: create database IF NOT EXISTS %s\"% (target_db))\r\n",
							"    spark.sql(\"create database IF NOT EXISTS %s\"% (target_db) )\r\n",
							""
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": true
						},
						"source": [
							"%%pyspark\r\n",
							"from pyspark.sql import SparkSession\r\n",
							"print('Attempting to create dataframe from: abfss://%s@%s.dfs.core.windows.net%s'% (blob_container_name, blob_account_name, blob_relative_path))\r\n",
							"df = spark.read.load('abfss://%s@%s.dfs.core.windows.net%s'% (blob_container_name, blob_account_name, blob_relative_path)\r\n",
							"                    , format='parquet')\r\n",
							"if target_type == 'H':                    \r\n",
							"    df.write.mode(\"overwrite\").saveAsTable(\"%s.%s\"% (target_db, target_table))\r\n",
							"elif  target_type != 'H':\r\n",
							"    pyspark_df.createOrReplaceTempView(\"pysparkdftemptable\")\r\n",
							"    \r\n",
							""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"if  (target_type == 'P')\r\n",
							"{\r\n",
							"val pool_df = spark.sqlContext.sql (\"select * from pysparkdftemptable\")\r\n",
							"\r\n",
							"pool_df.write.synapsesql(\"%s.%s\"% (target_db, target_table), Constants.INTERNAL)\r\n",
							"}"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"if  (target_type == 'D')\r\n",
							"{\r\n",
							"val delta_data = spark.sqlContext.sql (\"select * from pysparkdftemptable\")\r\n",
							"data.write.format(\"delta\").save(\"%s%s\"% (target_db, target_table))\r\n",
							"}\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RawToCuratedDelta')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Universal load procedue ",
				"folder": {
					"name": "Data Engineering"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "lakeprocessor",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 1,
					"conf": {
						"spark.dynamicAllocation.enabled": "true",
						"spark.dynamicAllocation.minExecutors": "1",
						"spark.dynamicAllocation.maxExecutors": "3",
						"spark.autotune.trackingId": "6dfa8507-cd14-49a1-ba57-4ed08d78af98"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "scala"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/851c54e9-e549-4015-87aa-eb3e00270118/resourceGroups/DemoAssets_rg/providers/Microsoft.Synapse/workspaces/demoworkspace001/bigDataPools/lakeprocessor",
						"name": "lakeprocessor",
						"type": "Spark",
						"endpoint": "https://demoworkspace001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/lakeprocessor",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.1",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Generic Parquet file/folder to Curated / Enriched Delta table\r\n",
							"\r\n",
							"This is a generic data engineering pattern that reads a parquet file or collection of files and instantiate them into a DeltaLake Table in the Curated Zone.\r\n",
							"\r\n",
							"## This notebook assumes the folowing:\r\n",
							"\r\n",
							"- The storage account is linked and authenticated in synapse\r\n",
							"- The storage account is ADLS gen2\r\n",
							"\r\n",
							"\r\n",
							"# The notebook is driven by a set of parameters that are devided up into two catagories:\r\n",
							"\r\n",
							"## Catagory 1: Source Variables:\r\n",
							"\r\n",
							"- blob_account_name,  this is the name of your storage account \r\n",
							"- blob_container_name,  this is the name of your source storage container \r\n",
							"- blob_relative_path, this is your relative folder path for the source parquet file(s) \r\n",
							"\r\n",
							"## Catagory 2: Target Variables:\r\n",
							"\r\n",
							"- target_db,\r\n",
							"this is the name of the target database this is the target folder for deltalake tables\r\n",
							"- target_table, \r\n",
							"this is the name of the target table \r\n",
							"- target_type, \r\n",
							"this is the target type, can be D for Delta(Assumed Clean incremental source) ,I for Insert(Need row key to handle de-duplication) , U for Upsert (Need row key/business key for merge), O for OverWrite\r\n",
							"- target_container, this is the name of the target storage container\r\n",
							"- partition\\_by\\_clause, this is the partition statement IE: \" PARTITIONED BY (**_{Partition column}_**) \"  this is only used when if the table does not exist\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"microsoft": {
								"language": "scala"
							},
							"jupyter": {
								"source_hidden": false
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"%%spark\r\n",
							"val blob_account_name = \"piraeusdemosa\"\r\n",
							"val blob_container_name = \"raw\"\r\n",
							"val blob_relative_path = \"396/mssql/dbo/adb_esgsentimentvsmarketperformance/2022/02/15/22/43/*.parquet\"\r\n",
							"val target_db = \"sales_mart\" \r\n",
							"val target_path = \"/delta/sales_mart/\"\r\n",
							"val target_container = \"enriched\"\r\n",
							"val target_table =\"dbo_adb_esgsentimentvsmarketperformance\"\r\n",
							"val partition_by_clause = \" \"\r\n",
							"val target_bk = \" \"\r\n",
							"val target_type = \"D\"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Setup Main Control Parameters"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Generate or Insert into Enriched based on Partition and Upsert if Business key exists"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "scala"
							},
							"collapsed": true
						},
						"source": [
							"%%spark\r\n",
							"import io.delta.tables._\r\n",
							"import org.apache.spark.sql.functions._\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"//spark.databricks.delta.schema.autoMerge.enabled(true)\r\n",
							"spark.conf.set(\"spark.databricks.delta.retentionDurationCheck.enabled\",\"true\")\r\n",
							"\r\n",
							"//val deltaTable = DeltaTable.forPath(spark, s\"${txtqual}${location_pth}${target_table}/${txtqual}\")\r\n",
							"//Main Declarations\r\n",
							"val txtqual = \"\"\"\"\"\"\"\r\n",
							"val tempselectsql = s\"select *,CURRENT_TIMESTAMP as EnrichedProcessDateTime,input_file_name() as RawFileName from sourcedata \"\r\n",
							"val location_pth = s\"abfss://${target_container}@${blob_account_name}.dfs.core.windows.net${target_path}\"\r\n",
							"val source_location_pth = s\"abfss://${blob_container_name}@${blob_account_name}.dfs.core.windows.net/${blob_relative_path}\"\r\n",
							"\r\n",
							"//Generate Create statements\r\n",
							"val cdbsql_cmd = s\"CREATE DATABASE IF NOT EXISTS ${target_db} LOCATION ${txtqual}${location_pth}${txtqual}\"\r\n",
							"val temptablesql =s\"CREATE OR REPLACE TEMPORARY VIEW sourcedata USING parquet options (path ${txtqual}${source_location_pth}${txtqual})\"\r\n",
							"val target_table_sql = s\"CREATE TABLE IF NOT EXISTS ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}` USING DELTA ${partition_by_clause} LOCATION ${txtqual}${location_pth}${target_table.replaceAll(\"-\",\"_\")}/${txtqual} as ${tempselectsql}\"\r\n",
							"val qtdtarget_table = s\"`${target_table.replaceAll(\"-\",\"_\")}`\"\r\n",
							"//Set session states\r\n",
							"//spark.databricks.delta.schema.autoMerge.enabled(true)\r\n",
							"\r\n",
							"\r\n",
							"//Run DB Create if not exists scripts\r\n",
							"spark.sql(cdbsql_cmd)\r\n",
							"//Generate Temp View of source data\r\n",
							"spark.sql(temptablesql)\r\n",
							"\r\n",
							"\r\n",
							"//Setup Main Control Parameters\r\n",
							"spark.catalog.setCurrentDatabase(target_db)\r\n",
							"val tblexist = spark.catalog.tableExists(qtdtarget_table)\r\n",
							"\r\n",
							"\r\n",
							"//If Target table does not exitst then generate \r\n",
							"if  (tblexist == false)\r\n",
							"{\r\n",
							"    \r\n",
							"    spark.sql(target_table_sql)\r\n",
							"}\r\n",
							"\r\n",
							"println(tblexist)\r\n",
							"if  (tblexist)\r\n",
							"{\r\n",
							"//Force Spark Context\r\n",
							"    spark.catalog.setCurrentDatabase(target_db)\r\n",
							"//Check source data type\r\n",
							"if  (target_type == \"D\")\r\n",
							"{\r\n",
							"//GENERATE Insert Statement\r\n",
							"val insertsql = s\"INSERT INTO ${target_db}.${target_table.replaceAll(\"-\",\"_\")} \\n  ${tempselectsql} \"\r\n",
							"spark.sql(insertsql)\r\n",
							"\r\n",
							"}\r\n",
							"\r\n",
							"if  (target_type == \"I\")\r\n",
							"{\r\n",
							"//GENERATE Insert Statement\r\n",
							"val insertsql = s\"INSERT INTO ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}` \\n  ${tempselectsql} \\n Where ${target_bk} NOT IN (SELECT ${target_bk} From ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}`) \"\r\n",
							"//spark.sql(insertsql)\r\n",
							"spark.sql(insertsql)\r\n",
							"\r\n",
							"}\r\n",
							"\r\n",
							"if  (target_type == \"U\")\r\n",
							"{\r\n",
							"//GENERATE Insert Statement\r\n",
							"val insertsql = s\"MERGE INTO ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}` \\n USING (${tempselectsql}) AS sourcedata \\n ON ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}`.${target_bk} = sourcedata.${target_bk} \\n WHEN MATCHED THEN \\n UPDATE SET * \\n WHEN NOT MATCHED \\n THEN INSERT *\"\r\n",
							"spark.sql(insertsql)\r\n",
							"}\r\n",
							"\r\n",
							"if  (target_type == \"O\")\r\n",
							"{\r\n",
							"\r\n",
							"//GENERATE Insert Statement\r\n",
							"val insertsqld = s\"DELETE FROM ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}`\"\r\n",
							"val insertsqli = s\"INSERT INTO ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}` \\n  ${tempselectsql}\"\r\n",
							"val insertsqlv = s\"VACUUM ${target_db}.`${target_table.replaceAll(\"-\",\"_\")}` RETAIN 0 HOURS\"\r\n",
							"\r\n",
							"//Delete and insert\r\n",
							"spark.sql(insertsqld)\r\n",
							"spark.sql(insertsqli)\r\n",
							"//Cleanup\r\n",
							"spark.conf.set(\"spark.databricks.delta.retentionDurationCheck.enabled\",\"false\")\r\n",
							"spark.sql(insertsqlv)\r\n",
							"spark.conf.set(\"spark.databricks.delta.retentionDurationCheck.enabled\",\"true\")\r\n",
							"}\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"}\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/BankingCustomerModel')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true,
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"Banking\",\"Version\":\"0.1.0\"}}}"
							},
							"Name": "BankingCustomerModel",
							"EntityType": "DATABASE",
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "BenefitCriteriaType",
							"Description": "Benefit Criteria Type is a means of classifying, grouping or categorizing specific Benefit Criteria at a higher level for analysis and presentation.\n\nThe Benefit Criteria is the specific variable or value that may be linked to a Market Segment.\n\nThe Benefit Type is the larger category to which the Benefit Criteria belongs.\n\nThe following are examples:\n\nBenefit Criteria:  Long Term Appreciation\nBenefit Type:  Investment Objective\n\nBenefit Criteria:  Retirement Savings\nBenefit Type:  Investment Objective",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "BenefitCriteriaTypeId",
										"Description": "The unique identifier of a Benefit Criteria Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BenefitCriteriaType.cdm.json/BenefitCriteriaType",
											"Name": "BenefitCriteriaTypeId"
										}
									},
									{
										"Name": "BenefitCriteriaTypeName",
										"Description": "The name of the Benefit Criteria Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BenefitCriteriaType.cdm.json/BenefitCriteriaType",
											"Name": "BenefitCriteriaTypeName"
										}
									},
									{
										"Name": "BenefitCriteriaTypeDescription",
										"Description": "The description of the Benefit Criteria Type.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 512,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BenefitCriteriaType.cdm.json/BenefitCriteriaType",
											"Name": "BenefitCriteriaTypeDescription"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/BenefitCriteriaType",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/BenefitCriteriaType",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"BenefitCriteriaTypeId\":{\"entity\":\"BenefitCriteriaType.cdm.json/BenefitCriteriaType\",\"name\":\"BenefitCriteriaTypeId\"},\"BenefitCriteriaTypeName\":{\"entity\":\"BenefitCriteriaType.cdm.json/BenefitCriteriaType\",\"name\":\"BenefitCriteriaTypeName\"},\"BenefitCriteriaTypeDescription\":{\"entity\":\"BenefitCriteriaType.cdm.json/BenefitCriteriaType\",\"name\":\"BenefitCriteriaTypeDescription\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"BenefitCriteriaType\",\"path\":\"BenefitCriteriaType.cdm.json/BenefitCriteriaType\"},\"description\":\"Benefit Criteria Type is a means of classifying, grouping or categorizing specific Benefit Criteria at a higher level for analysis and presentation.\\n\\nThe Benefit Criteria is the specific variable or value that may be linked to a Market Segment.\\n\\nThe Benefit Type is the larger category to which the Benefit Criteria belongs.\\n\\nThe following are examples:\\n\\nBenefit Criteria:  Long Term Appreciation\\nBenefit Type:  Investment Objective\\n\\nBenefit Criteria:  Retirement Savings\\nBenefit Type:  Investment Objective\",\"primaryKey\":[\"BenefitCriteriaTypeId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BenefitCriteriaType.cdm.json/BenefitCriteriaType\",\"name\":\"BenefitCriteriaTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Benefit Criteria Type.\",\"isNullable\":false,\"name\":\"BenefitCriteriaTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BenefitCriteriaType.cdm.json/BenefitCriteriaType\",\"name\":\"BenefitCriteriaTypeName\"},\"dataType\":\"string\",\"dataTypeLength\":128,\"description\":\"The name of the Benefit Criteria Type.\",\"isNullable\":true,\"name\":\"BenefitCriteriaTypeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BenefitCriteriaType.cdm.json/BenefitCriteriaType\",\"name\":\"BenefitCriteriaTypeDescription\"},\"dataType\":\"string\",\"dataTypeLength\":512,\"description\":\"The description of the Benefit Criteria Type.\",\"isNullable\":true,\"name\":\"BenefitCriteriaTypeDescription\"}]}}}",
								"Description": "Benefit Criteria Type is a means of classifying, grouping or categorizing specific Benefit Criteria at a higher level for analysis and presentation.\n\nThe Benefit Criteria is the specific variable or value that may be linked to a Market Segment.\n\nThe Benefit Type is the larger category to which the Benefit Criteria belongs.\n\nThe following are examples:\n\nBenefit Criteria:  Long Term Appreciation\nBenefit Type:  Investment Objective\n\nBenefit Criteria:  Retirement Savings\nBenefit Type:  Investment Objective",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "BenefitCriteriaTypeId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "BorrowDebtToIncomeItemization",
							"Description": "The specific items used to calculated the associated debt-to-income ratio.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "EffectiveDate",
										"Description": "The effective date that the debt-to-income ratio is calculated or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization",
											"Name": "EffectiveDate"
										}
									},
									{
										"Name": "DebtToIncomeItemId",
										"Description": "The unique identifier of a debt-to-income item.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization",
											"Name": "DebtToIncomeItemId"
										}
									},
									{
										"Name": "DebtToIncomeItemAmount",
										"Description": "The associated item amount to applied to the debt-to-income ratio calculated.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization",
											"Name": "DebtToIncomeItemAmount"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/BorrowDebtToIncomeItemization",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/BorrowDebtToIncomeItemization",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"CustomerId\"},\"EffectiveDate\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"EffectiveDate\"},\"DebtToIncomeItemId\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"DebtToIncomeItemId\"},\"DebtToIncomeItemAmount\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"DebtToIncomeItemAmount\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"BorrowDebtToIncomeItemization\",\"path\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\"},\"description\":\"The specific items used to calculated the associated debt-to-income ratio.\",\"primaryKey\":[\"CustomerId\",\"EffectiveDate\",\"DebtToIncomeItemId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"EffectiveDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The effective date that the debt-to-income ratio is calculated or 'as-of'.\",\"isNullable\":false,\"name\":\"EffectiveDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"DebtToIncomeItemId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a debt-to-income item.\",\"isNullable\":false,\"name\":\"DebtToIncomeItemId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"BorrowDebtToIncomeItemization.cdm.json/BorrowDebtToIncomeItemization\",\"name\":\"DebtToIncomeItemAmount\"},\"dataType\":\"decimal\",\"dataTypeLength\":18,\"description\":\"The associated item amount to applied to the debt-to-income ratio calculated.\",\"isNullable\":true,\"scale\":2,\"name\":\"DebtToIncomeItemAmount\"}]}}}",
								"Description": "The specific items used to calculated the associated debt-to-income ratio.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,EffectiveDate,DebtToIncomeItemId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "ClusterCustomer",
							"Description": "The one of more Clusters that the customer is a member of, which is an arbitrary grouping of customers based upon convenience, purpose or some similar objective.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ClusterCustomer.cdm.json/ClusterCustomer",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "ClusterId",
										"Description": "The unique identifier of a Cluster.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ClusterCustomer.cdm.json/ClusterCustomer",
											"Name": "ClusterId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period starting date of the Cluster Customer association.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ClusterCustomer.cdm.json/ClusterCustomer",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period ending date of the Cluster Customer association.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ClusterCustomer.cdm.json/ClusterCustomer",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "DateAssigned",
										"Description": "The date that the Customer was assigned to the Cluster.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ClusterCustomer.cdm.json/ClusterCustomer",
											"Name": "DateAssigned"
										}
									},
									{
										"Name": "ClusterCustomerNote",
										"Description": "A note, comment or additional information regarding the Cluster Customer.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ClusterCustomer.cdm.json/ClusterCustomer",
											"Name": "ClusterCustomerNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/ClusterCustomer",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/ClusterCustomer",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"CustomerId\"},\"ClusterId\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"ClusterId\"},\"PeriodStartDate\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"PeriodEndDate\"},\"DateAssigned\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"DateAssigned\"},\"ClusterCustomerNote\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"ClusterCustomerNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"ClusterCustomer\",\"path\":\"ClusterCustomer.cdm.json/ClusterCustomer\"},\"description\":\"The one of more Clusters that the customer is a member of, which is an arbitrary grouping of customers based upon convenience, purpose or some similar objective.\",\"primaryKey\":[\"CustomerId\",\"ClusterId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"ClusterId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Cluster.\",\"isNullable\":false,\"name\":\"ClusterId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period starting date of the Cluster Customer association.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period ending date of the Cluster Customer association.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"DateAssigned\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Customer was assigned to the Cluster.\",\"isNullable\":true,\"name\":\"DateAssigned\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"name\":\"ClusterCustomerNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the Cluster Customer.\",\"isNullable\":true,\"name\":\"ClusterCustomerNote\"}]}}}",
								"Description": "The one of more Clusters that the customer is a member of, which is an arbitrary grouping of customers based upon convenience, purpose or some similar objective.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,ClusterId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "Customer",
							"Description": "A customer is an individual or legal entity that has or has purchased a product or service.\n\nA potential customer is an individual or legal entity that has the desire to acquire a product or service, the financial ability to pay for that product or service and is located in a location in which the product or service can be delivered to them.\n\nThe definition of 'customer' is of critical importance for every organization.    \n\nIt is the customer that is the focus of product planning, marketing, sales, service, reporting and analytics.    Without 'customer' there would be no need for the organization to exist since its purpose is to serve the customer and profit from that interaction.\n\nThe definition of 'customer' must be consistent with how customers exist and interact with the organization in the real world.  An artificial or conceptual definition of 'customer' that is not consistent with these two objectives is doomed to fail because the data will not be consistent with the definition and employees will not accept concepts or terms that are not consistent with what they see, know and how they interact with customers on a working basis.\n\nMicrosoft defines 'customer' to meet these objectives.    When we look out into the real world we see two dominant types of customers:  human beings and legal entities.     \n\nHuman beings are obviously male and female individuals of various ages, sex, demographics and a variety of similar dimensions that describe and define them who purchase products, good and services.    \n\nLegal entities are those legally-defined entities such as corporations, partnerships, non-profit organizations, government organizations etc. that purchase products, goods and services.\n\nThis view of 'customer' is consistent with the real world and consistent with how employees view and interact with customers.\n\nOf course, that is just the start of identifying, defining and understanding each type of 'customer'.     There is a great deal of detail, complexity and related data that can be used to define each type of customer to various levels of detail and different dimensions of information.\n\nMicrosoft implements these detailed concepts and related data via two distinct business area models that expand the coverage and complexity of each type of customer:\n\n-  INDIVIDUAL CUSTOMER Business Area Model\n-  LEGAL ENTITY CUSTOMER Business Area Model\n\nNote:\nEach of the Microsoft models - enterprise, business area or data warehouse - have a representative level of detail for the appropriate type of customer, which is a 'subset' of the total data available in the associated INDIVIDUAL CUSTOMER or LEGAL ENTITY CUSTOMER business area models..   Reference either of those models to expand the coverage or level of detail in each respective data model.\n\nThe actual customer implemented in each model depends upon the dominant use of customer for that industry.     \n\nFor example, in the pharmaceutical industry the customer is a legal entity, which represents another corporation, company, government organization etc. that purchases the pharmaceutical product and then distributes that product to the end-customer, which is an individual in a retail environment or a government-distribution scheme.    \n\nFor this example, the pharmaceutical models will have the legal entity customer represented but not the individual 'end customer' since that is represented in the appropriate retail industry models, which are a different offering.     \n\nOf course, the entire set of data available for a legal entity customer is contained in the associated LEGAL ENTITY CUSTOMER Business Area Model.   Reference the LEGAL ENTITY CUSTOMER Business Area Model to incorporate additional data that may be of relevance.\n\nIn many industries both types of customers are represented since a legal entity or individual can purchase products, goods or services and enter into contracts.    For these industries, both types of customers are represented by some of the more significant or relevant data derived from the associated LEGAL ENTITY or INDIVIDUAL CUSTOMER business area models.   These models can be used to expand the scope or level of detail in any of the enterprise, business area or data warehouse models.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "CustomerEstablishedDate",
										"Description": "The date that the Customer relationship was established.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "CustomerEstablishedDate"
										}
									},
									{
										"Name": "CustomerTypeId",
										"Description": "The unique identifier of a Customer Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "CustomerTypeId"
										}
									},
									{
										"Name": "ResponsibilityCenterId",
										"Description": "The unique identifier of a Responsibility Center.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "ResponsibilityCenterId"
										}
									},
									{
										"Name": "LedgerId",
										"Description": "The unique identifier of a Ledger.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "LedgerId"
										}
									},
									{
										"Name": "LedgerAccountNumber",
										"Description": "The unique identifier of a Ledger Account.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 16,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "LedgerAccountNumber"
										}
									},
									{
										"Name": "CustomerNote",
										"Description": "A note, comment or additional information regarding the Customer.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "CustomerNote"
										}
									},
									{
										"Name": "PartyId",
										"Description": "The unique identifier of a Party.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "PartyId"
										}
									},
									{
										"Name": "GlobalLocationNumber",
										"Description": "The Global Location Number (GLN) is a simple tool used to uniquely identify locations. It can be used to identify physical locations such as a warehouse, legal entities, or a function / department within a legal entity. The GLN is part of the GS1 system of standards.",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": true,
											"Precision": 13,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										},
										"BaseAttributeReference": {
											"Entity": "Customer.cdm.json/Customer",
											"Name": "GlobalLocationNumber"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/Customer",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/Customer",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerId\"},\"CustomerEstablishedDate\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerEstablishedDate\"},\"CustomerTypeId\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerTypeId\"},\"ResponsibilityCenterId\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"ResponsibilityCenterId\"},\"LedgerId\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"LedgerId\"},\"LedgerAccountNumber\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"LedgerAccountNumber\"},\"CustomerNote\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerNote\"},\"PartyId\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"PartyId\"},\"GlobalLocationNumber\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"GlobalLocationNumber\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"Customer\",\"path\":\"Customer.cdm.json/Customer\"},\"description\":\"A customer is an individual or legal entity that has or has purchased a product or service.\\n\\nA potential customer is an individual or legal entity that has the desire to acquire a product or service, the financial ability to pay for that product or service and is located in a location in which the product or service can be delivered to them.\\n\\nThe definition of 'customer' is of critical importance for every organization.    \\n\\nIt is the customer that is the focus of product planning, marketing, sales, service, reporting and analytics.    Without 'customer' there would be no need for the organization to exist since its purpose is to serve the customer and profit from that interaction.\\n\\nThe definition of 'customer' must be consistent with how customers exist and interact with the organization in the real world.  An artificial or conceptual definition of 'customer' that is not consistent with these two objectives is doomed to fail because the data will not be consistent with the definition and employees will not accept concepts or terms that are not consistent with what they see, know and how they interact with customers on a working basis.\\n\\nMicrosoft defines 'customer' to meet these objectives.    When we look out into the real world we see two dominant types of customers:  human beings and legal entities.     \\n\\nHuman beings are obviously male and female individuals of various ages, sex, demographics and a variety of similar dimensions that describe and define them who purchase products, good and services.    \\n\\nLegal entities are those legally-defined entities such as corporations, partnerships, non-profit organizations, government organizations etc. that purchase products, goods and services.\\n\\nThis view of 'customer' is consistent with the real world and consistent with how employees view and interact with customers.\\n\\nOf course, that is just the start of identifying, defining and understanding each type of 'customer'.     There is a great deal of detail, complexity and related data that can be used to define each type of customer to various levels of detail and different dimensions of information.\\n\\nMicrosoft implements these detailed concepts and related data via two distinct business area models that expand the coverage and complexity of each type of customer:\\n\\n-  INDIVIDUAL CUSTOMER Business Area Model\\n-  LEGAL ENTITY CUSTOMER Business Area Model\\n\\nNote:\\nEach of the Microsoft models - enterprise, business area or data warehouse - have a representative level of detail for the appropriate type of customer, which is a 'subset' of the total data available in the associated INDIVIDUAL CUSTOMER or LEGAL ENTITY CUSTOMER business area models..   Reference either of those models to expand the coverage or level of detail in each respective data model.\\n\\nThe actual customer implemented in each model depends upon the dominant use of customer for that industry.     \\n\\nFor example, in the pharmaceutical industry the customer is a legal entity, which represents another corporation, company, government organization etc. that purchases the pharmaceutical product and then distributes that product to the end-customer, which is an individual in a retail environment or a government-distribution scheme.    \\n\\nFor this example, the pharmaceutical models will have the legal entity customer represented but not the individual 'end customer' since that is represented in the appropriate retail industry models, which are a different offering.     \\n\\nOf course, the entire set of data available for a legal entity customer is contained in the associated LEGAL ENTITY CUSTOMER Business Area Model.   Reference the LEGAL ENTITY CUSTOMER Business Area Model to incorporate additional data that may be of relevance.\\n\\nIn many industries both types of customers are represented since a legal entity or individual can purchase products, goods or services and enter into contracts.    For these industries, both types of customers are represented by some of the more significant or relevant data derived from the associated LEGAL ENTITY or INDIVIDUAL CUSTOMER business area models.   These models can be used to expand the scope or level of detail in any of the enterprise, business area or data warehouse models.\",\"primaryKey\":[\"CustomerId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerEstablishedDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Customer relationship was established.\",\"isNullable\":true,\"name\":\"CustomerEstablishedDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Customer Type.\",\"isNullable\":true,\"name\":\"CustomerTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"ResponsibilityCenterId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Responsibility Center.\",\"isNullable\":true,\"name\":\"ResponsibilityCenterId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"LedgerId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Ledger.\",\"isNullable\":true,\"name\":\"LedgerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"LedgerAccountNumber\"},\"dataType\":\"string\",\"dataTypeLength\":16,\"description\":\"The unique identifier of a Ledger Account.\",\"isNullable\":true,\"name\":\"LedgerAccountNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"CustomerNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the Customer.\",\"isNullable\":true,\"name\":\"CustomerNote\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"PartyId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Party.\",\"isNullable\":true,\"name\":\"PartyId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"Customer.cdm.json/Customer\",\"name\":\"GlobalLocationNumber\"},\"dataType\":\"decimal\",\"dataTypeLength\":13,\"description\":\"The Global Location Number (GLN) is a simple tool used to uniquely identify locations. It can be used to identify physical locations such as a warehouse, legal entities, or a function / department within a legal entity. The GLN is part of the GS1 system of standards.\",\"isNullable\":true,\"scale\":0,\"name\":\"GlobalLocationNumber\"}]}}}",
								"Description": "A customer is an individual or legal entity that has or has purchased a product or service.\n\nA potential customer is an individual or legal entity that has the desire to acquire a product or service, the financial ability to pay for that product or service and is located in a location in which the product or service can be delivered to them.\n\nThe definition of 'customer' is of critical importance for every organization.    \n\nIt is the customer that is the focus of product planning, marketing, sales, service, reporting and analytics.    Without 'customer' there would be no need for the organization to exist since its purpose is to serve the customer and profit from that interaction.\n\nThe definition of 'customer' must be consistent with how customers exist and interact with the organization in the real world.  An artificial or conceptual definition of 'customer' that is not consistent with these two objectives is doomed to fail because the data will not be consistent with the definition and employees will not accept concepts or terms that are not consistent with what they see, know and how they interact with customers on a working basis.\n\nMicrosoft defines 'customer' to meet these objectives.    When we look out into the real world we see two dominant types of customers:  human beings and legal entities.     \n\nHuman beings are obviously male and female individuals of various ages, sex, demographics and a variety of similar dimensions that describe and define them who purchase products, good and services.    \n\nLegal entities are those legally-defined entities such as corporations, partnerships, non-profit organizations, government organizations etc. that purchase products, goods and services.\n\nThis view of 'customer' is consistent with the real world and consistent with how employees view and interact with customers.\n\nOf course, that is just the start of identifying, defining and understanding each type of 'customer'.     There is a great deal of detail, complexity and related data that can be used to define each type of customer to various levels of detail and different dimensions of information.\n\nMicrosoft implements these detailed concepts and related data via two distinct business area models that expand the coverage and complexity of each type of customer:\n\n-  INDIVIDUAL CUSTOMER Business Area Model\n-  LEGAL ENTITY CUSTOMER Business Area Model\n\nNote:\nEach of the Microsoft models - enterprise, business area or data warehouse - have a representative level of detail for the appropriate type of customer, which is a 'subset' of the total data available in the associated INDIVIDUAL CUSTOMER or LEGAL ENTITY CUSTOMER business area models..   Reference either of those models to expand the coverage or level of detail in each respective data model.\n\nThe actual customer implemented in each model depends upon the dominant use of customer for that industry.     \n\nFor example, in the pharmaceutical industry the customer is a legal entity, which represents another corporation, company, government organization etc. that purchases the pharmaceutical product and then distributes that product to the end-customer, which is an individual in a retail environment or a government-distribution scheme.    \n\nFor this example, the pharmaceutical models will have the legal entity customer represented but not the individual 'end customer' since that is represented in the appropriate retail industry models, which are a different offering.     \n\nOf course, the entire set of data available for a legal entity customer is contained in the associated LEGAL ENTITY CUSTOMER Business Area Model.   Reference the LEGAL ENTITY CUSTOMER Business Area Model to incorporate additional data that may be of relevance.\n\nIn many industries both types of customers are represented since a legal entity or individual can purchase products, goods or services and enter into contracts.    For these industries, both types of customers are represented by some of the more significant or relevant data derived from the associated LEGAL ENTITY or INDIVIDUAL CUSTOMER business area models.   These models can be used to expand the scope or level of detail in any of the enterprise, business area or data warehouse models.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerActivity",
							"Description": "The Activity(s) that a specific Individual Customer has acknowledged was identified or recorded as of the indicated date.\n\nActivities, Interests and Opinions are the foundation of Psychographics and Psychographic Segmentation.     Activities, Interests and Opinions equate to 'lifestyle'.    Activities, Interests and Opinions (AIO) are the basis for understanding consumer buying behavior as a function of their lifestyle.\n\nActivities describe what a consumer 'does', such as occupation, hobbies, entertainment.\n\nEach organization will identify, define and track a specific set of AIO's to gather information about, define consumers and make decisions. \n\nExamples:\n\nActivity =  \"Cooking\"\nActivity Type = \"Personal Interest\"\n\nActivity =  \"Golf\"\nActivity Type = \"Personal Sports\n\nActivity =  \"Mutual Fund Investing\"\nActivity Type = \"Finance\"\n\nSales, marketing and advertising activities are often planned for or targeted at groups involved in or interested in specific activities.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerActivity.cdm.json/CustomerActivity",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "ActivityId",
										"Description": "The unique identifier of an Activity.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerActivity.cdm.json/CustomerActivity",
											"Name": "ActivityId"
										}
									},
									{
										"Name": "Date",
										"Description": "The timestamp that the associated information is reported, recorded or effective as-of.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerActivity.cdm.json/CustomerActivity",
											"Name": "Date"
										}
									},
									{
										"Name": "AioLevelId",
										"Description": "The unique identifier of an AIO Level.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerActivity.cdm.json/CustomerActivity",
											"Name": "AioLevelId"
										}
									},
									{
										"Name": "CustomerActivityNote",
										"Description": "A note, comment or additional information related to the Activity in which the Customer participates.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerActivity.cdm.json/CustomerActivity",
											"Name": "CustomerActivityNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerActivity",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerActivity",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"CustomerId\"},\"ActivityId\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"ActivityId\"},\"Date\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"Date\"},\"AioLevelId\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"AioLevelId\"},\"CustomerActivityNote\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"CustomerActivityNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerActivity\",\"path\":\"CustomerActivity.cdm.json/CustomerActivity\"},\"description\":\"The Activity(s) that a specific Individual Customer has acknowledged was identified or recorded as of the indicated date.\\n\\nActivities, Interests and Opinions are the foundation of Psychographics and Psychographic Segmentation.     Activities, Interests and Opinions equate to 'lifestyle'.    Activities, Interests and Opinions (AIO) are the basis for understanding consumer buying behavior as a function of their lifestyle.\\n\\nActivities describe what a consumer 'does', such as occupation, hobbies, entertainment.\\n\\nEach organization will identify, define and track a specific set of AIO's to gather information about, define consumers and make decisions. \\n\\nExamples:\\n\\nActivity =  \\\"Cooking\\\"\\nActivity Type = \\\"Personal Interest\\\"\\n\\nActivity =  \\\"Golf\\\"\\nActivity Type = \\\"Personal Sports\\n\\nActivity =  \\\"Mutual Fund Investing\\\"\\nActivity Type = \\\"Finance\\\"\\n\\nSales, marketing and advertising activities are often planned for or targeted at groups involved in or interested in specific activities.\",\"primaryKey\":[\"CustomerId\",\"ActivityId\",\"Date\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"ActivityId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Activity.\",\"isNullable\":false,\"name\":\"ActivityId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"Date\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The timestamp that the associated information is reported, recorded or effective as-of.\",\"isNullable\":false,\"name\":\"Date\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"AioLevelId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an AIO Level.\",\"isNullable\":true,\"name\":\"AioLevelId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerActivity.cdm.json/CustomerActivity\",\"name\":\"CustomerActivityNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information related to the Activity in which the Customer participates.\",\"isNullable\":true,\"name\":\"CustomerActivityNote\"}]}}}",
								"Description": "The Activity(s) that a specific Individual Customer has acknowledged was identified or recorded as of the indicated date.\n\nActivities, Interests and Opinions are the foundation of Psychographics and Psychographic Segmentation.     Activities, Interests and Opinions equate to 'lifestyle'.    Activities, Interests and Opinions (AIO) are the basis for understanding consumer buying behavior as a function of their lifestyle.\n\nActivities describe what a consumer 'does', such as occupation, hobbies, entertainment.\n\nEach organization will identify, define and track a specific set of AIO's to gather information about, define consumers and make decisions. \n\nExamples:\n\nActivity =  \"Cooking\"\nActivity Type = \"Personal Interest\"\n\nActivity =  \"Golf\"\nActivity Type = \"Personal Sports\n\nActivity =  \"Mutual Fund Investing\"\nActivity Type = \"Finance\"\n\nSales, marketing and advertising activities are often planned for or targeted at groups involved in or interested in specific activities.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,ActivityId,Date",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerAncestry",
							"Description": "The ancestry(s) identified by or for the Customer.\n\nOne or more ethnic identifies that may be identified by the Customer.\n\nSource:  US Bureau of Census\nThis identification is based on self-identification; the data on ancestry represents self-classification by people according to the ancestry group(s) with which they most closely identify. Ancestry refers to a person's ethnic origin or descent, \"roots,\" or heritage or the place of birth of the person or the person's parents or ancestors before their arrival in the United States. Some ethnic identities, such as \"Egyptian\" or \"Polish\" can be traced to geographic areas outside the United States, while other ethnicities such as \"Pennsylvania Dutch\" or \"Cajun\" evolved in the United States. \n\nThe ancestry question allowed respondents to report one or more ancestry groups. While a large number of respondents listed a single ancestry, the majority of answers included more than one ethnic entry.\n\nThe Census Bureau accepts \"American\" as a unique ethnicity if it was given alone, with an ambiguous response, or with State names. If the respondent listed any other ethnic identity such as \"Italian American,\" generally the \"American\" portion of the response\nwas not coded. However, distinct groups such as \"American Indian,\" \"Mexican American,\" and \"African American\" were coded and identified separately because they represented groups who considered themselves different from those who reported as\n\"Indian,\" \"Mexican,\" or \"African,\" respectively.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAncestry.cdm.json/CustomerAncestry",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "AncestryId",
										"Description": "The unique identifier of an Ancestry.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAncestry.cdm.json/CustomerAncestry",
											"Name": "AncestryId"
										}
									},
									{
										"Name": "CustomerAncestryNote",
										"Description": "Notes, comments or additional information regarding the Customer's ancestry.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAncestry.cdm.json/CustomerAncestry",
											"Name": "CustomerAncestryNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAncestry",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAncestry",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerAncestry.cdm.json/CustomerAncestry\",\"name\":\"CustomerId\"},\"AncestryId\":{\"entity\":\"CustomerAncestry.cdm.json/CustomerAncestry\",\"name\":\"AncestryId\"},\"CustomerAncestryNote\":{\"entity\":\"CustomerAncestry.cdm.json/CustomerAncestry\",\"name\":\"CustomerAncestryNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerAncestry\",\"path\":\"CustomerAncestry.cdm.json/CustomerAncestry\"},\"description\":\"The ancestry(s) identified by or for the Customer.\\n\\nOne or more ethnic identifies that may be identified by the Customer.\\n\\nSource:  US Bureau of Census\\nThis identification is based on self-identification; the data on ancestry represents self-classification by people according to the ancestry group(s) with which they most closely identify. Ancestry refers to a person's ethnic origin or descent, \\\"roots,\\\" or heritage or the place of birth of the person or the person's parents or ancestors before their arrival in the United States. Some ethnic identities, such as \\\"Egyptian\\\" or \\\"Polish\\\" can be traced to geographic areas outside the United States, while other ethnicities such as \\\"Pennsylvania Dutch\\\" or \\\"Cajun\\\" evolved in the United States. \\n\\nThe ancestry question allowed respondents to report one or more ancestry groups. While a large number of respondents listed a single ancestry, the majority of answers included more than one ethnic entry.\\n\\nThe Census Bureau accepts \\\"American\\\" as a unique ethnicity if it was given alone, with an ambiguous response, or with State names. If the respondent listed any other ethnic identity such as \\\"Italian American,\\\" generally the \\\"American\\\" portion of the response\\nwas not coded. However, distinct groups such as \\\"American Indian,\\\" \\\"Mexican American,\\\" and \\\"African American\\\" were coded and identified separately because they represented groups who considered themselves different from those who reported as\\n\\\"Indian,\\\" \\\"Mexican,\\\" or \\\"African,\\\" respectively.\",\"primaryKey\":[\"CustomerId\",\"AncestryId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAncestry.cdm.json/CustomerAncestry\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAncestry.cdm.json/CustomerAncestry\",\"name\":\"AncestryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Ancestry.\",\"isNullable\":false,\"name\":\"AncestryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAncestry.cdm.json/CustomerAncestry\",\"name\":\"CustomerAncestryNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"Notes, comments or additional information regarding the Customer's ancestry.\",\"isNullable\":true,\"name\":\"CustomerAncestryNote\"}]}}}",
								"Description": "The ancestry(s) identified by or for the Customer.\n\nOne or more ethnic identifies that may be identified by the Customer.\n\nSource:  US Bureau of Census\nThis identification is based on self-identification; the data on ancestry represents self-classification by people according to the ancestry group(s) with which they most closely identify. Ancestry refers to a person's ethnic origin or descent, \"roots,\" or heritage or the place of birth of the person or the person's parents or ancestors before their arrival in the United States. Some ethnic identities, such as \"Egyptian\" or \"Polish\" can be traced to geographic areas outside the United States, while other ethnicities such as \"Pennsylvania Dutch\" or \"Cajun\" evolved in the United States. \n\nThe ancestry question allowed respondents to report one or more ancestry groups. While a large number of respondents listed a single ancestry, the majority of answers included more than one ethnic entry.\n\nThe Census Bureau accepts \"American\" as a unique ethnicity if it was given alone, with an ambiguous response, or with State names. If the respondent listed any other ethnic identity such as \"Italian American,\" generally the \"American\" portion of the response\nwas not coded. However, distinct groups such as \"American Indian,\" \"Mexican American,\" and \"African American\" were coded and identified separately because they represented groups who considered themselves different from those who reported as\n\"Indian,\" \"Mexican,\" or \"African,\" respectively.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,AncestryId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerAssociation",
							"Description": "The one or more Association(s) in which the customer participates or belongs.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAssociation.cdm.json/CustomerAssociation",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "AssociationId",
										"Description": "The unique identifier of an Association.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAssociation.cdm.json/CustomerAssociation",
											"Name": "AssociationId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAssociation.cdm.json/CustomerAssociation",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAssociation.cdm.json/CustomerAssociation",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CustomerAssociationNote",
										"Description": "A note, comment or additional information regarding the Customer/Association relationship.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAssociation.cdm.json/CustomerAssociation",
											"Name": "CustomerAssociationNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAssociation",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAssociation",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"CustomerId\"},\"AssociationId\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"AssociationId\"},\"PeriodStartDate\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"PeriodEndDate\"},\"CustomerAssociationNote\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"CustomerAssociationNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerAssociation\",\"path\":\"CustomerAssociation.cdm.json/CustomerAssociation\"},\"description\":\"The one or more Association(s) in which the customer participates or belongs.\",\"primaryKey\":[\"CustomerId\",\"AssociationId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"AssociationId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Association.\",\"isNullable\":false,\"name\":\"AssociationId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the associated data is effective or 'as-of'.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the associated data is effective or 'as-of'.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"name\":\"CustomerAssociationNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the Customer/Association relationship.\",\"isNullable\":true,\"name\":\"CustomerAssociationNote\"}]}}}",
								"Description": "The one or more Association(s) in which the customer participates or belongs.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,AssociationId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerAuthenticationMethod",
							"Description": "A method that can be used to authenticate a customer. Note that not all identification, security questions or biometrics may be considered suitable or sufficient for party authentication.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "CustomerAuthenticationMethodId",
										"Description": "The unique identifier of a Customer Authentication Method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "CustomerAuthenticationMethodId"
										}
									},
									{
										"Name": "CustomerAuthenticationMethodPeriodStartTimestamp",
										"Description": "The period start timestamp that the customer is associated with the authentication method.",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "CustomerAuthenticationMethodPeriodStartTimestamp"
										}
									},
									{
										"Name": "CustomerAuthenticationMethodPeriodEndTimestamp",
										"Description": "The period end timestamp that the customer is associated with the authentication method.",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "CustomerAuthenticationMethodPeriodEndTimestamp"
										}
									},
									{
										"Name": "AuthenticationMethodId",
										"Description": "The unique identifier of an Authentication Method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "AuthenticationMethodId"
										}
									},
									{
										"Name": "CustomerAuthenticationMethodNote",
										"Description": "A note, comment or additional information regarding the customer authentication method.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "CustomerAuthenticationMethodNote"
										}
									},
									{
										"Name": "SecurityQuestionNumber",
										"Description": "The number associated with the order in which the question is asked for the purpose of identification.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "SecurityQuestionNumber"
										}
									},
									{
										"Name": "IdentificationId",
										"Description": "The unique identifier of the identification.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "IdentificationId"
										}
									},
									{
										"Name": "PeriodStartTimestamp",
										"Description": "The period start timestamp that the customer is associated with the security question.",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "PeriodStartTimestamp"
										}
									},
									{
										"Name": "BiometricTypeId",
										"Description": "The unique identifier of a biometric type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "BiometricTypeId"
										}
									},
									{
										"Name": "Timestamp",
										"Description": "The timestamp that the associated information is reported, recorded or effective as-of.",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod",
											"Name": "Timestamp"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAuthenticationMethod",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAuthenticationMethod",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerId\"},\"CustomerAuthenticationMethodId\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodId\"},\"CustomerAuthenticationMethodPeriodStartTimestamp\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodPeriodStartTimestamp\"},\"CustomerAuthenticationMethodPeriodEndTimestamp\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodPeriodEndTimestamp\"},\"AuthenticationMethodId\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"AuthenticationMethodId\"},\"CustomerAuthenticationMethodNote\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodNote\"},\"SecurityQuestionNumber\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"SecurityQuestionNumber\"},\"IdentificationId\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"IdentificationId\"},\"PeriodStartTimestamp\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"PeriodStartTimestamp\"},\"BiometricTypeId\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"BiometricTypeId\"},\"Timestamp\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"Timestamp\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerAuthenticationMethod\",\"path\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\"},\"description\":\"A method that can be used to authenticate a customer. Note that not all identification, security questions or biometrics may be considered suitable or sufficient for party authentication.\",\"primaryKey\":[\"CustomerId\",\"CustomerAuthenticationMethodId\",\"CustomerAuthenticationMethodPeriodStartTimestamp\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Customer Authentication Method.\",\"isNullable\":false,\"name\":\"CustomerAuthenticationMethodId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodPeriodStartTimestamp\"},\"dataType\":\"timestamp\",\"description\":\"The period start timestamp that the customer is associated with the authentication method.\",\"isNullable\":false,\"name\":\"CustomerAuthenticationMethodPeriodStartTimestamp\",\"timestampFormat\":\"YYYY-MM-DD HH:MM:SS.fffffffff\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodPeriodEndTimestamp\"},\"dataType\":\"timestamp\",\"description\":\"The period end timestamp that the customer is associated with the authentication method.\",\"isNullable\":true,\"name\":\"CustomerAuthenticationMethodPeriodEndTimestamp\",\"timestampFormat\":\"YYYY-MM-DD HH:MM:SS.fffffffff\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"AuthenticationMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Authentication Method.\",\"isNullable\":true,\"name\":\"AuthenticationMethodId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"CustomerAuthenticationMethodNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the customer authentication method.\",\"isNullable\":true,\"name\":\"CustomerAuthenticationMethodNote\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"SecurityQuestionNumber\"},\"dataType\":\"integer\",\"description\":\"The number associated with the order in which the question is asked for the purpose of identification.\",\"isNullable\":true,\"name\":\"SecurityQuestionNumber\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"IdentificationId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the identification.\",\"isNullable\":true,\"name\":\"IdentificationId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"PeriodStartTimestamp\"},\"dataType\":\"timestamp\",\"description\":\"The period start timestamp that the customer is associated with the security question.\",\"isNullable\":true,\"name\":\"PeriodStartTimestamp\",\"timestampFormat\":\"YYYY-MM-DD HH:MM:SS.fffffffff\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"BiometricTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a biometric type.\",\"isNullable\":true,\"name\":\"BiometricTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"name\":\"Timestamp\"},\"dataType\":\"timestamp\",\"description\":\"The timestamp that the associated information is reported, recorded or effective as-of.\",\"isNullable\":true,\"name\":\"Timestamp\",\"timestampFormat\":\"YYYY-MM-DD HH:MM:SS.fffffffff\"}]}}}",
								"Description": "A method that can be used to authenticate a customer. Note that not all identification, security questions or biometrics may be considered suitable or sufficient for party authentication.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,CustomerAuthenticationMethodId,CustomerAuthenticationMethodPeriodStartTimestamp",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerAuthorizedParty",
							"Description": "The name(s) and titles of related parties such as officers or authorized party(s) associated with the Customer.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "PartyId",
										"Description": "The unique identifier of a Party.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty",
											"Name": "PartyId"
										}
									},
									{
										"Name": "PositionStartDate",
										"Description": "The starting date that the person held the associated officer title.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty",
											"Name": "PositionStartDate"
										}
									},
									{
										"Name": "PositionEndDate",
										"Description": "The ending date that the person held the associated officer title.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty",
											"Name": "PositionEndDate"
										}
									},
									{
										"Name": "JobTitleId",
										"Description": "The unique identifier of a Job Title.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty",
											"Name": "JobTitleId"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAuthorizedParty",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerAuthorizedParty",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"CustomerId\"},\"PartyId\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"PartyId\"},\"PositionStartDate\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"PositionStartDate\"},\"PositionEndDate\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"PositionEndDate\"},\"JobTitleId\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"JobTitleId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerAuthorizedParty\",\"path\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\"},\"description\":\"The name(s) and titles of related parties such as officers or authorized party(s) associated with the Customer.\",\"primaryKey\":[\"CustomerId\",\"PartyId\",\"PositionStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"PartyId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Party.\",\"isNullable\":false,\"name\":\"PartyId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"PositionStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The starting date that the person held the associated officer title.\",\"isNullable\":false,\"name\":\"PositionStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"PositionEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The ending date that the person held the associated officer title.\",\"isNullable\":false,\"name\":\"PositionEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerAuthorizedParty.cdm.json/CustomerAuthorizedParty\",\"name\":\"JobTitleId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Job Title.\",\"isNullable\":true,\"name\":\"JobTitleId\"}]}}}",
								"Description": "The name(s) and titles of related parties such as officers or authorized party(s) associated with the Customer.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,PartyId,PositionStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerBehavioralCriteria",
							"Description": "The one or more behavioral criteria that are assigned or linked to a Customer and by which they are identified or qualified from a behavioral focus.\n\nNote:\nThis entity can be linked to PRODUCT if behavior is needed to be tracked for specific products.   This is normally done in models that have a specific industry-context such as the enterprise models.\n\nBehavioral market segmentation is based upon how consumers behave or use a products and the corresponding buying, consumption or usage patterns that result.    \n\nAn example of a behavioral criteria is when they buy a product (special occasions, Christmas, anniversaries) or how often they buy that product (occasional purchases, frequent purchases).\n\nThe business organization identifies a finite number of Behavioral Criteria that are used to identify customers and prospective customers.   \n\nThe Behavioral Criteria is the specific criteria or value that may be linked to a Market Segment.\n\nThe Behavioral Criteria Type is the larger category to which the Behavioral Criteria belongs.\n\nThe following are examples:\n\nBehavioral Criteria: Impulse shopper\nBehavioral Criteria Type:  Purchasing Pattern\n\nBehavioral Criteria: End Of Week\nBehavioral Criteria Type: Purchasing Pattern\n\nBehavioral Criteria: Aggressive \nBehavioral Criteria Type: Investment Style\n\nBehavioral Criteria: Business Communications\nBehavioral Criteria Type: Cellular Phone Usage\n\nBehavioral Criteria: Evening and Weekends\nBehavioral Criteria Type: Electricity Usage",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "BehavioralCriteriaId",
										"Description": "The unique identifier of a Behavioral Criteria.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria",
											"Name": "BehavioralCriteriaId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CustomerBehavioralCriteriaNote",
										"Description": "A note, comment or additional information related to Customer Behavioral Criteria.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria",
											"Name": "CustomerBehavioralCriteriaNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerBehavioralCriteria",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerBehavioralCriteria",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"CustomerId\"},\"BehavioralCriteriaId\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"BehavioralCriteriaId\"},\"PeriodStartDate\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"PeriodEndDate\"},\"CustomerBehavioralCriteriaNote\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"CustomerBehavioralCriteriaNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerBehavioralCriteria\",\"path\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\"},\"description\":\"The one or more behavioral criteria that are assigned or linked to a Customer and by which they are identified or qualified from a behavioral focus.\\n\\nNote:\\nThis entity can be linked to PRODUCT if behavior is needed to be tracked for specific products.   This is normally done in models that have a specific industry-context such as the enterprise models.\\n\\nBehavioral market segmentation is based upon how consumers behave or use a products and the corresponding buying, consumption or usage patterns that result.    \\n\\nAn example of a behavioral criteria is when they buy a product (special occasions, Christmas, anniversaries) or how often they buy that product (occasional purchases, frequent purchases).\\n\\nThe business organization identifies a finite number of Behavioral Criteria that are used to identify customers and prospective customers.   \\n\\nThe Behavioral Criteria is the specific criteria or value that may be linked to a Market Segment.\\n\\nThe Behavioral Criteria Type is the larger category to which the Behavioral Criteria belongs.\\n\\nThe following are examples:\\n\\nBehavioral Criteria: Impulse shopper\\nBehavioral Criteria Type:  Purchasing Pattern\\n\\nBehavioral Criteria: End Of Week\\nBehavioral Criteria Type: Purchasing Pattern\\n\\nBehavioral Criteria: Aggressive \\nBehavioral Criteria Type: Investment Style\\n\\nBehavioral Criteria: Business Communications\\nBehavioral Criteria Type: Cellular Phone Usage\\n\\nBehavioral Criteria: Evening and Weekends\\nBehavioral Criteria Type: Electricity Usage\",\"primaryKey\":[\"CustomerId\",\"BehavioralCriteriaId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"BehavioralCriteriaId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Behavioral Criteria.\",\"isNullable\":false,\"name\":\"BehavioralCriteriaId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the associated data is effective or 'as-of'.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the associated data is effective or 'as-of'.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBehavioralCriteria.cdm.json/CustomerBehavioralCriteria\",\"name\":\"CustomerBehavioralCriteriaNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information related to Customer Behavioral Criteria.\",\"isNullable\":true,\"name\":\"CustomerBehavioralCriteriaNote\"}]}}}",
								"Description": "The one or more behavioral criteria that are assigned or linked to a Customer and by which they are identified or qualified from a behavioral focus.\n\nNote:\nThis entity can be linked to PRODUCT if behavior is needed to be tracked for specific products.   This is normally done in models that have a specific industry-context such as the enterprise models.\n\nBehavioral market segmentation is based upon how consumers behave or use a products and the corresponding buying, consumption or usage patterns that result.    \n\nAn example of a behavioral criteria is when they buy a product (special occasions, Christmas, anniversaries) or how often they buy that product (occasional purchases, frequent purchases).\n\nThe business organization identifies a finite number of Behavioral Criteria that are used to identify customers and prospective customers.   \n\nThe Behavioral Criteria is the specific criteria or value that may be linked to a Market Segment.\n\nThe Behavioral Criteria Type is the larger category to which the Behavioral Criteria belongs.\n\nThe following are examples:\n\nBehavioral Criteria: Impulse shopper\nBehavioral Criteria Type:  Purchasing Pattern\n\nBehavioral Criteria: End Of Week\nBehavioral Criteria Type: Purchasing Pattern\n\nBehavioral Criteria: Aggressive \nBehavioral Criteria Type: Investment Style\n\nBehavioral Criteria: Business Communications\nBehavioral Criteria Type: Cellular Phone Usage\n\nBehavioral Criteria: Evening and Weekends\nBehavioral Criteria Type: Electricity Usage",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,BehavioralCriteriaId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerBiometric",
							"Description": "The automatic recognition of customers based on unique combinations of measurable physical or behavioral characteristics. Examples include fingerprints, iris scanning, face and voice recognition, or hand geometry.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBiometric.cdm.json/CustomerBiometric",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "BiometricTypeId",
										"Description": "The unique identifier of a biometric type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBiometric.cdm.json/CustomerBiometric",
											"Name": "BiometricTypeId"
										}
									},
									{
										"Name": "Timestamp",
										"Description": "The timestamp that the associated information is reported, recorded or effective as-of.",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBiometric.cdm.json/CustomerBiometric",
											"Name": "Timestamp"
										}
									},
									{
										"Name": "CustomerBiometricTemplate",
										"Description": "The biometric reference pattern of an individual of the associated biometric stored for matching. \n\nBioCert devices convert fingerprint information into mathematical templates, so actual fingerprint images are not stored and cannot be reconstructed based on template data.",
										"OriginDataTypeName": {
											"TypeName": "binary",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "binary"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBiometric.cdm.json/CustomerBiometric",
											"Name": "CustomerBiometricTemplate"
										}
									},
									{
										"Name": "CustomerBiometricNote",
										"Description": "A note, comment or additional information regarding the customer biometric.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerBiometric.cdm.json/CustomerBiometric",
											"Name": "CustomerBiometricNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerBiometric",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerBiometric",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"CustomerId\"},\"BiometricTypeId\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"BiometricTypeId\"},\"Timestamp\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"Timestamp\"},\"CustomerBiometricTemplate\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"CustomerBiometricTemplate\"},\"CustomerBiometricNote\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"CustomerBiometricNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerBiometric\",\"path\":\"CustomerBiometric.cdm.json/CustomerBiometric\"},\"description\":\"The automatic recognition of customers based on unique combinations of measurable physical or behavioral characteristics. Examples include fingerprints, iris scanning, face and voice recognition, or hand geometry.\",\"primaryKey\":[\"CustomerId\",\"BiometricTypeId\",\"Timestamp\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"BiometricTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a biometric type.\",\"isNullable\":false,\"name\":\"BiometricTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"Timestamp\"},\"dataType\":\"timestamp\",\"description\":\"The timestamp that the associated information is reported, recorded or effective as-of.\",\"isNullable\":false,\"name\":\"Timestamp\",\"timestampFormat\":\"YYYY-MM-DD HH:MM:SS.fffffffff\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"CustomerBiometricTemplate\"},\"dataType\":\"binary\",\"description\":\"The biometric reference pattern of an individual of the associated biometric stored for matching. \\n\\nBioCert devices convert fingerprint information into mathematical templates, so actual fingerprint images are not stored and cannot be reconstructed based on template data.\",\"isNullable\":true,\"name\":\"CustomerBiometricTemplate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"name\":\"CustomerBiometricNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the customer biometric.\",\"isNullable\":true,\"name\":\"CustomerBiometricNote\"}]}}}",
								"Description": "The automatic recognition of customers based on unique combinations of measurable physical or behavioral characteristics. Examples include fingerprints, iris scanning, face and voice recognition, or hand geometry.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,BiometricTypeId,Timestamp",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerCertification",
							"Description": "The certification(s) held by the customer.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCertification.cdm.json/CustomerCertification",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "CertificationId",
										"Description": "The unique identifier of a Certification.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCertification.cdm.json/CustomerCertification",
											"Name": "CertificationId"
										}
									},
									{
										"Name": "CustomerCertificationStartDate",
										"Description": "The date that the customer certification was awarded.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCertification.cdm.json/CustomerCertification",
											"Name": "CustomerCertificationStartDate"
										}
									},
									{
										"Name": "CustomerCertificationExpiryDate",
										"Description": "The expiry date of the customer certification that was awarded.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCertification.cdm.json/CustomerCertification",
											"Name": "CustomerCertificationExpiryDate"
										}
									},
									{
										"Name": "CustomerCertificationNote",
										"Description": "A note, comment or additional information regarding the customer certification.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCertification.cdm.json/CustomerCertification",
											"Name": "CustomerCertificationNote"
										}
									},
									{
										"Name": "CertifiedByPartyId",
										"Description": "The unique identifier of a Party.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCertification.cdm.json/CustomerCertification",
											"Name": "CertifiedByPartyId"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCertification",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCertification",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerId\"},\"CertificationId\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CertificationId\"},\"CustomerCertificationStartDate\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerCertificationStartDate\"},\"CustomerCertificationExpiryDate\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerCertificationExpiryDate\"},\"CustomerCertificationNote\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerCertificationNote\"},\"CertifiedByPartyId\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CertifiedByPartyId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerCertification\",\"path\":\"CustomerCertification.cdm.json/CustomerCertification\"},\"description\":\"The certification(s) held by the customer.\",\"primaryKey\":[\"CustomerId\",\"CertificationId\",\"CustomerCertificationStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CertificationId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Certification.\",\"isNullable\":false,\"name\":\"CertificationId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerCertificationStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the customer certification was awarded.\",\"isNullable\":false,\"name\":\"CustomerCertificationStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerCertificationExpiryDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The expiry date of the customer certification that was awarded.\",\"isNullable\":true,\"name\":\"CustomerCertificationExpiryDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CustomerCertificationNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the customer certification.\",\"isNullable\":true,\"name\":\"CustomerCertificationNote\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"name\":\"CertifiedByPartyId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Party.\",\"isNullable\":true,\"name\":\"CertifiedByPartyId\"}]}}}",
								"Description": "The certification(s) held by the customer.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,CertificationId,CustomerCertificationStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerConsent",
							"Description": "Consent provided by the customer during the specified period.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerConsent.cdm.json/CustomerConsent",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "ConsentId",
										"Description": "The unique identifier of the Consent.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerConsent.cdm.json/CustomerConsent",
											"Name": "ConsentId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerConsent.cdm.json/CustomerConsent",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerConsent.cdm.json/CustomerConsent",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "ProofOfConsentDocumentId",
										"Description": "The unique identifier of a Document.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerConsent.cdm.json/CustomerConsent",
											"Name": "ProofOfConsentDocumentId"
										}
									},
									{
										"Name": "CustomerConsentNote",
										"Description": "A note, comment or additional information regarding the customer consent.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerConsent.cdm.json/CustomerConsent",
											"Name": "CustomerConsentNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerConsent",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerConsent",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"CustomerId\"},\"ConsentId\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"ConsentId\"},\"PeriodStartDate\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"PeriodEndDate\"},\"ProofOfConsentDocumentId\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"ProofOfConsentDocumentId\"},\"CustomerConsentNote\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"CustomerConsentNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerConsent\",\"path\":\"CustomerConsent.cdm.json/CustomerConsent\"},\"description\":\"Consent provided by the customer during the specified period.\",\"primaryKey\":[\"CustomerId\",\"ConsentId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"ConsentId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Consent.\",\"isNullable\":false,\"name\":\"ConsentId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the associated data is effective or 'as-of'.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the associated data is effective or 'as-of'.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"ProofOfConsentDocumentId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Document.\",\"isNullable\":true,\"name\":\"ProofOfConsentDocumentId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"name\":\"CustomerConsentNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the customer consent.\",\"isNullable\":true,\"name\":\"CustomerConsentNote\"}]}}}",
								"Description": "Consent provided by the customer during the specified period.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,ConsentId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerContactPurpose",
							"Description": "A contact method by which the customer could be contacted regarding the intended contact purpose.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurpose.cdm.json/CustomerContactPurpose",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "ContactPurposeId",
										"Description": "The unique identifier of the Contact Purpose.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurpose.cdm.json/CustomerContactPurpose",
											"Name": "ContactPurposeId"
										}
									},
									{
										"Name": "ContactMethodId",
										"Description": "The unique identifier of a Contact Method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurpose.cdm.json/CustomerContactPurpose",
											"Name": "ContactMethodId"
										}
									},
									{
										"Name": "OptInStatusTypeId",
										"Description": "The unique identifier of an Opt-In Status Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurpose.cdm.json/CustomerContactPurpose",
											"Name": "OptInStatusTypeId"
										}
									},
									{
										"Name": "CustomerContactPurposeNote",
										"Description": "A note, comment or additional information regarding the customer contact purpose.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurpose.cdm.json/CustomerContactPurpose",
											"Name": "CustomerContactPurposeNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerContactPurpose",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerContactPurpose",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"CustomerId\"},\"ContactPurposeId\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"ContactPurposeId\"},\"ContactMethodId\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"ContactMethodId\"},\"OptInStatusTypeId\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"OptInStatusTypeId\"},\"CustomerContactPurposeNote\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"CustomerContactPurposeNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerContactPurpose\",\"path\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\"},\"description\":\"A contact method by which the customer could be contacted regarding the intended contact purpose.\",\"primaryKey\":[\"CustomerId\",\"ContactPurposeId\",\"ContactMethodId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"ContactPurposeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Contact Purpose.\",\"isNullable\":false,\"name\":\"ContactPurposeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"ContactMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Contact Method.\",\"isNullable\":false,\"name\":\"ContactMethodId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"OptInStatusTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Opt-In Status Type.\",\"isNullable\":true,\"name\":\"OptInStatusTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"name\":\"CustomerContactPurposeNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the customer contact purpose.\",\"isNullable\":true,\"name\":\"CustomerContactPurposeNote\"}]}}}",
								"Description": "A contact method by which the customer could be contacted regarding the intended contact purpose.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,ContactPurposeId,ContactMethodId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerContactPurposeStatus",
							"Description": "A contact method at a point in time by which the customer could be contacted regarding the intended contact purpose.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "ContactPurposeId",
										"Description": "The unique identifier of the Contact Purpose.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus",
											"Name": "ContactPurposeId"
										}
									},
									{
										"Name": "ContactMethodId",
										"Description": "The unique identifier of a Contact Method.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus",
											"Name": "ContactMethodId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the associated data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "OptInStatusTypeId",
										"Description": "The unique identifier of an Opt-In Status Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus",
											"Name": "OptInStatusTypeId"
										}
									},
									{
										"Name": "CustomerContactPurposeStatusNote",
										"Description": "A note, comment or additional information regarding the customer contact purpose status.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus",
											"Name": "CustomerContactPurposeStatusNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerContactPurposeStatus",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerContactPurposeStatus",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"CustomerId\"},\"ContactPurposeId\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"ContactPurposeId\"},\"ContactMethodId\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"ContactMethodId\"},\"PeriodStartDate\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"PeriodEndDate\"},\"OptInStatusTypeId\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"OptInStatusTypeId\"},\"CustomerContactPurposeStatusNote\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"CustomerContactPurposeStatusNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerContactPurposeStatus\",\"path\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\"},\"description\":\"A contact method at a point in time by which the customer could be contacted regarding the intended contact purpose.\",\"primaryKey\":[\"CustomerId\",\"ContactPurposeId\",\"ContactMethodId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"ContactPurposeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Contact Purpose.\",\"isNullable\":false,\"name\":\"ContactPurposeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"ContactMethodId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Contact Method.\",\"isNullable\":false,\"name\":\"ContactMethodId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the associated data is effective or 'as-of'.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the associated data is effective or 'as-of'.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"OptInStatusTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of an Opt-In Status Type.\",\"isNullable\":true,\"name\":\"OptInStatusTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"name\":\"CustomerContactPurposeStatusNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the customer contact purpose status.\",\"isNullable\":true,\"name\":\"CustomerContactPurposeStatusNote\"}]}}}",
								"Description": "A contact method at a point in time by which the customer could be contacted regarding the intended contact purpose.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,ContactPurposeId,ContactMethodId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerContract",
							"Description": "The one or more Contracts specifying the terms, conditions and obligations of the Customer.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContract.cdm.json/CustomerContract",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "ContractId",
										"Description": "The unique identifier of a Contract.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContract.cdm.json/CustomerContract",
											"Name": "ContractId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date the customer-contract relationship is effective.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContract.cdm.json/CustomerContract",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date the customer-contract relationship is effective.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContract.cdm.json/CustomerContract",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CustomerContractNote",
										"Description": "A note, comment or additional information regarding the Customer's contract.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerContract.cdm.json/CustomerContract",
											"Name": "CustomerContractNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerContract",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerContract",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"CustomerId\"},\"ContractId\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"ContractId\"},\"PeriodStartDate\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"PeriodEndDate\"},\"CustomerContractNote\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"CustomerContractNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerContract\",\"path\":\"CustomerContract.cdm.json/CustomerContract\"},\"description\":\"The one or more Contracts specifying the terms, conditions and obligations of the Customer.\",\"primaryKey\":[\"CustomerId\",\"ContractId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"ContractId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Contract.\",\"isNullable\":false,\"name\":\"ContractId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date the customer-contract relationship is effective.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date the customer-contract relationship is effective.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerContract.cdm.json/CustomerContract\",\"name\":\"CustomerContractNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the Customer's contract.\",\"isNullable\":true,\"name\":\"CustomerContractNote\"}]}}}",
								"Description": "The one or more Contracts specifying the terms, conditions and obligations of the Customer.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,ContractId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerCountryOfCitizenship",
							"Description": "The country of citizenship of the customer as of the associated time.\n\nThis answers the question \"What country(s) does the individual have citizenship for?\"",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "CountryId",
										"Description": "The unique identifier of the Country.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship",
											"Name": "CountryId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date that the customer has citizenship in the associated country.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date that the customer has citizenship in the associated country.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "NationalId",
										"Description": "The unique national identifier or citizenship ID of the individual in the associated country.\n\nThe number typically consists of alphanumeric characters and is not a 'number' but rather an 'ID'.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship",
											"Name": "NationalId"
										}
									},
									{
										"Name": "PassportId",
										"Description": "The unique passport identifier or ID of the individual in the associated country.\n\nThe number typically consists of alphanumeric characters and is not a 'number' but rather an 'ID'.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship",
											"Name": "PassportId"
										}
									},
									{
										"Name": "CitizenshipTypeId",
										"Description": "The unique identifier of a citizenship type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship",
											"Name": "CitizenshipTypeId"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCountryOfCitizenship",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCountryOfCitizenship",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"CustomerId\"},\"CountryId\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"CountryId\"},\"PeriodStartDate\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"PeriodEndDate\"},\"NationalId\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"NationalId\"},\"PassportId\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"PassportId\"},\"CitizenshipTypeId\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"CitizenshipTypeId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerCountryOfCitizenship\",\"path\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\"},\"description\":\"The country of citizenship of the customer as of the associated time.\\n\\nThis answers the question \\\"What country(s) does the individual have citizenship for?\\\"\",\"primaryKey\":[\"CustomerId\",\"CountryId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"CountryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Country.\",\"isNullable\":false,\"name\":\"CountryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date that the customer has citizenship in the associated country.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date that the customer has citizenship in the associated country.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"NationalId\"},\"dataType\":\"integer\",\"description\":\"The unique national identifier or citizenship ID of the individual in the associated country.\\n\\nThe number typically consists of alphanumeric characters and is not a 'number' but rather an 'ID'.\",\"isNullable\":true,\"name\":\"NationalId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"PassportId\"},\"dataType\":\"integer\",\"description\":\"The unique passport identifier or ID of the individual in the associated country.\\n\\nThe number typically consists of alphanumeric characters and is not a 'number' but rather an 'ID'.\",\"isNullable\":true,\"name\":\"PassportId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfCitizenship.cdm.json/CustomerCountryOfCitizenship\",\"name\":\"CitizenshipTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a citizenship type.\",\"isNullable\":true,\"name\":\"CitizenshipTypeId\"}]}}}",
								"Description": "The country of citizenship of the customer as of the associated time.\n\nThis answers the question \"What country(s) does the individual have citizenship for?\"",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,CountryId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerCountryOfResidence",
							"Description": "The country of residence of the customer as of the associated time.\n\nThis answers the question \"What country(s) does the individual have residence for?\"",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "CountryId",
										"Description": "The unique identifier of the Country.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence",
											"Name": "CountryId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date that the customer has residency in the associated country.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date that the customer has residency in the associated country.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CountryResidencyStatusId",
										"Description": "The unique identifier of a Country Residency Status.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence",
											"Name": "CountryResidencyStatusId"
										}
									},
									{
										"Name": "ResidencePermitVisaId",
										"Description": "The identifier of 'number' of the residence permit or visa associated with residence in the associated country.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence",
											"Name": "ResidencePermitVisaId"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCountryOfResidence",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCountryOfResidence",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"CustomerId\"},\"CountryId\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"CountryId\"},\"PeriodStartDate\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"PeriodEndDate\"},\"CountryResidencyStatusId\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"CountryResidencyStatusId\"},\"ResidencePermitVisaId\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"ResidencePermitVisaId\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerCountryOfResidence\",\"path\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\"},\"description\":\"The country of residence of the customer as of the associated time.\\n\\nThis answers the question \\\"What country(s) does the individual have residence for?\\\"\",\"primaryKey\":[\"CustomerId\",\"CountryId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"CountryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Country.\",\"isNullable\":false,\"name\":\"CountryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date that the customer has residency in the associated country.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date that the customer has residency in the associated country.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"CountryResidencyStatusId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Country Residency Status.\",\"isNullable\":true,\"name\":\"CountryResidencyStatusId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryOfResidence.cdm.json/CustomerCountryOfResidence\",\"name\":\"ResidencePermitVisaId\"},\"dataType\":\"integer\",\"description\":\"The identifier of 'number' of the residence permit or visa associated with residence in the associated country.\",\"isNullable\":true,\"name\":\"ResidencePermitVisaId\"}]}}}",
								"Description": "The country of residence of the customer as of the associated time.\n\nThis answers the question \"What country(s) does the individual have residence for?\"",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,CountryId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerCountryTaxStatus",
							"Description": "The status of the Customer in the associated Country.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "CountryId",
										"Description": "The unique identifier of the Country.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus",
											"Name": "CountryId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the associated D&B data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the associated D&B data is effective or 'as-of'.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "TaxStatusId",
										"Description": "The unique identifier of a tax status.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus",
											"Name": "TaxStatusId"
										}
									},
									{
										"Name": "CustomerCountryTaxStatusNote",
										"Description": "Notes, comments or additional information regarding the Customer Country Tax Status.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus",
											"Name": "CustomerCountryTaxStatusNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCountryTaxStatus",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCountryTaxStatus",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"CustomerId\"},\"CountryId\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"CountryId\"},\"PeriodStartDate\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"PeriodEndDate\"},\"TaxStatusId\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"TaxStatusId\"},\"CustomerCountryTaxStatusNote\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"CustomerCountryTaxStatusNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerCountryTaxStatus\",\"path\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\"},\"description\":\"The status of the Customer in the associated Country.\",\"primaryKey\":[\"CustomerId\",\"CountryId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"CountryId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Country.\",\"isNullable\":false,\"name\":\"CountryId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the associated D&B data is effective or 'as-of'.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the associated D&B data is effective or 'as-of'.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"TaxStatusId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a tax status.\",\"isNullable\":false,\"name\":\"TaxStatusId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCountryTaxStatus.cdm.json/CustomerCountryTaxStatus\",\"name\":\"CustomerCountryTaxStatusNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"Notes, comments or additional information regarding the Customer Country Tax Status.\",\"isNullable\":true,\"name\":\"CustomerCountryTaxStatusNote\"}]}}}",
								"Description": "The status of the Customer in the associated Country.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,CountryId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerCreditStatus",
							"Description": "The Credit Status of the Customer for the associated period.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCreditStatus.cdm.json/CustomerCreditStatus",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date for which the associated Credit Status is defined for the Customer Account.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCreditStatus.cdm.json/CustomerCreditStatus",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date for which the associated Credit Status is defined for the Customer Account.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCreditStatus.cdm.json/CustomerCreditStatus",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "CreditStatusTypeId",
										"Description": "The unique identifier of a Credit Status Type.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCreditStatus.cdm.json/CustomerCreditStatus",
											"Name": "CreditStatusTypeId"
										}
									},
									{
										"Name": "CreditStatusNote",
										"Description": "A note, comment or additional information regarding the Credit Status.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCreditStatus.cdm.json/CustomerCreditStatus",
											"Name": "CreditStatusNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCreditStatus",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCreditStatus",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"CustomerId\"},\"PeriodStartDate\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"PeriodEndDate\"},\"CreditStatusTypeId\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"CreditStatusTypeId\"},\"CreditStatusNote\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"CreditStatusNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerCreditStatus\",\"path\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\"},\"description\":\"The Credit Status of the Customer for the associated period.\",\"primaryKey\":[\"CustomerId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date for which the associated Credit Status is defined for the Customer Account.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date for which the associated Credit Status is defined for the Customer Account.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"CreditStatusTypeId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Credit Status Type.\",\"isNullable\":false,\"name\":\"CreditStatusTypeId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"name\":\"CreditStatusNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"A note, comment or additional information regarding the Credit Status.\",\"isNullable\":true,\"name\":\"CreditStatusNote\"}]}}}",
								"Description": "The Credit Status of the Customer for the associated period.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "CustomerCurrencyUsage",
							"Description": "The currency(s) and currency usage(s) that are identified for the customer for the indicated period.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerId",
										"Description": "The unique identifier of a Customer.",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage",
											"Name": "CustomerId"
										}
									},
									{
										"Name": "CurrencyUsageId",
										"Description": "The unique identifier of the Currency Usage.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage",
											"Name": "CurrencyUsageId"
										}
									},
									{
										"Name": "PeriodStartDate",
										"Description": "The period start date associated with the customer currency usage.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage",
											"Name": "PeriodStartDate"
										}
									},
									{
										"Name": "PeriodEndDate",
										"Description": "The period end date associated with the customer currency usage.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage",
											"Name": "PeriodEndDate"
										}
									},
									{
										"Name": "IsoCurrencyCode",
										"Description": "The ISO 4217 currency code.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 3,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage",
											"Name": "IsoCurrencyCode"
										}
									},
									{
										"Name": "CurrencyUsageNote",
										"Description": "Notes, comments or additional information regarding the customer currency usage.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 1024,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage",
											"Name": "CurrencyUsageNote"
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCurrencyUsage",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://piraeusdemofs@piraeusdemosa.dfs.core.windows.net/BankingCustomerModel/CustomerCurrencyUsage",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"CustomerId\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"CustomerId\"},\"CurrencyUsageId\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"CurrencyUsageId\"},\"PeriodStartDate\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"PeriodStartDate\"},\"PeriodEndDate\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"PeriodEndDate\"},\"IsoCurrencyCode\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"IsoCurrencyCode\"},\"CurrencyUsageNote\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"CurrencyUsageNote\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"baseEntityReference\":{\"name\":\"CustomerCurrencyUsage\",\"path\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\"},\"description\":\"The currency(s) and currency usage(s) that are identified for the customer for the indicated period.\",\"primaryKey\":[\"CustomerId\",\"CurrencyUsageId\",\"PeriodStartDate\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"CustomerId\"},\"dataType\":\"long\",\"description\":\"The unique identifier of a Customer.\",\"isNullable\":false,\"name\":\"CustomerId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"CurrencyUsageId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of the Currency Usage.\",\"isNullable\":false,\"name\":\"CurrencyUsageId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"PeriodStartDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period start date associated with the customer currency usage.\",\"isNullable\":false,\"name\":\"PeriodStartDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"PeriodEndDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The period end date associated with the customer currency usage.\",\"isNullable\":true,\"name\":\"PeriodEndDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"IsoCurrencyCode\"},\"dataType\":\"string\",\"dataTypeLength\":3,\"description\":\"The ISO 4217 currency code.\",\"isNullable\":false,\"name\":\"IsoCurrencyCode\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"name\":\"CurrencyUsageNote\"},\"dataType\":\"string\",\"dataTypeLength\":1024,\"description\":\"Notes, comments or additional information regarding the customer currency usage.\",\"isNullable\":true,\"name\":\"CurrencyUsageNote\"}]}}}",
								"Description": "The currency(s) and currency usage(s) that are identified for the customer for the indicated period.",
								"DisplayFolderInfo": "{\"name\":\"Customer\",\"colorCode\":\"#4B003F\"}",
								"PrimaryKeys": "CustomerId,CurrencyUsageId,PeriodStartDate",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-ancmhbvcks",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerContactPurpose",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-bhppztgpsk",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "CustomerContactPurpose",
							"ToTableName": "CustomerContactPurposeStatus",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "ContactMethodId",
									"ToColumnName": "ContactMethodId"
								},
								{
									"FromColumnName": "ContactPurposeId",
									"ToColumnName": "ContactPurposeId"
								},
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"CustomerContactPurpose.cdm.json/CustomerContactPurpose\",\"toEntity\":\"CustomerContactPurposeStatus.cdm.json/CustomerContactPurposeStatus\",\"joinPairs\":[{\"fromAttribute\":\"ContactMethodId\",\"toAttribute\":\"ContactMethodId\"},{\"fromAttribute\":\"ContactPurposeId\",\"toAttribute\":\"ContactPurposeId\"},{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-cuuqloigit",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerConsent",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerConsent.cdm.json/CustomerConsent\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-gdoiklznwm",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerAssociation",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerAssociation.cdm.json/CustomerAssociation\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-jfulwjhggm",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerCertification",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerCertification.cdm.json/CustomerCertification\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-ngtbmcredl",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "ClusterCustomer",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"ClusterCustomer.cdm.json/ClusterCustomer\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-tlszkaafya",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerCreditStatus",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerCreditStatus.cdm.json/CustomerCreditStatus\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-vauhspuoxw",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerAuthenticationMethod",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-wafvbwdiwz",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerContract",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerContract.cdm.json/CustomerContract\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-xilzlcjqoi",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "CustomerBiometric",
							"ToTableName": "CustomerAuthenticationMethod",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "BiometricTypeId",
									"ToColumnName": "BiometricTypeId"
								},
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								},
								{
									"FromColumnName": "Timestamp",
									"ToColumnName": "Timestamp"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"CustomerBiometric.cdm.json/CustomerBiometric\",\"toEntity\":\"CustomerAuthenticationMethod.cdm.json/CustomerAuthenticationMethod\",\"joinPairs\":[{\"fromAttribute\":\"BiometricTypeId\",\"toAttribute\":\"BiometricTypeId\"},{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"},{\"fromAttribute\":\"Timestamp\",\"toAttribute\":\"Timestamp\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "BankingCustomerModel"
							},
							"Name": "relationship-zrsqqwjpha",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "Customer",
							"ToTableName": "CustomerCurrencyUsage",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "CustomerId",
									"ToColumnName": "CustomerId"
								}
							],
							"Properties": {
								"DerivedModelRelationshipInfo": "{\"baseRelationship\":{\"fromEntity\":\"Customer.cdm.json/Customer\",\"toEntity\":\"CustomerCurrencyUsage.cdm.json/CustomerCurrencyUsage\",\"joinPairs\":[{\"fromAttribute\":\"CustomerId\",\"toAttribute\":\"CustomerId\"}]}}"
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SalesModel')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true,
								"DerivedModelDBInfo": "{\"ModelDirectives\":{\"BaseModel\":{\"Name\":\"ConsumerGoods\",\"Version\":\"0.1.0\"}}}"
							},
							"Description": "Dimensional Data Model for Retail Sales",
							"Name": "SalesModel",
							"EntityType": "DATABASE",
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://model@piraeusdemosa.dfs.core.windows.net/SalesModel",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage"
								}
							}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SalesModel"
							},
							"Name": "DimCustomer",
							"Description": "",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "CustomerID",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "DimCustomerTitle",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DimCustomerFirstName",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DimCustomerMiddleName",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DimCustomerLastName",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DimCustomerCompanyName",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DimCustomerEmailAddress",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DimCustomerSourceDate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									},
									{
										"Name": "DimCustomerETLDate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://model@piraeusdemosa.dfs.core.windows.net/SalesModel/DimCustomer",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://model@piraeusdemosa.dfs.core.windows.net/SalesModel/DimCustomer",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "CustomerID",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SalesModel"
							},
							"Name": "DimProduct",
							"Description": "A product is anything that can be offered to a market that might satisfy a want or need by potential customers.    That product is the sum of all physical, psychological, symbolic, and service attributes associated with it.\n\nThere are two basic types of products:\n\n- Tangible (physical)\n- Intangible (non-physical) such as services\n\nA service is a non-material or intangible product - such as professional consultancy, maintenance service, repair service etc.\nEach product has its own benefits, application, brand name, and packaging that gives it its own identity and distinguishing characteristics.\n\nEvery business or organization has business rules that define precisely what a product is.    While we intuitively know what a product is, we must quantify that knowledge and associated business rules with consistent definitions that can be implemented within the organization in strategies and applications.\n\nA product typically goes through five stages of development:\n\n(1) Idea Stage - involving a thorough evaluation of the potential product\n\n(2) Concept Stage - determines customer acceptance by testing and presentation to consumers and distribution channel members.   Specific aspects regarding quality, dependability, reliability, warranty, packaging, service, pricing, terms of sale, sales and distribution channels, advertising and promotions are evaluated.\n\n(3) Product Development Stage - transforms the prototype product into an actual product for mass sale.   This stage requires close interaction between both marketing and manufacturing.\n\n(4) Test Marketing Stage - may or may not be used since it is an expensive and time-consuming process.  Test marketing involves evaluating various product options and alternatives.\n\n(5) Commercialization - It is very expensive to launch a new product so commercialization only applies to those specific products that are actually going to be sold to the market.\n\nProducts tend to be categorized as either:  Industrial goods and consumer goods\n\nIndustrial goods are used to produce other products .\n\nIndustrial goods may be further divided into:\n\n- Raw materials\n- Equipment\n- Pre-built materials \n- Supplies.\n\nConsumer goods are intended for consumption by the general public.\n\nConsumer goods may be further divided into:\n\n- Durable goods\n- Nondurable goods\n- Packaged goods\n\nA product may be a member of a product family or product line.\n\nA product family is a grouping of products or services that are related to each other by common function, functionality, design platform or similar characteristics.\n\nMembers of a product family frequently have many common parts and assemblies.\n\nProduct families are the highest level of grouping for forecasting, capacity planning or related functions.\n\nEx:\nThe Apple Macintosh family of products consists of the product lines:\n- Mac mini\n- MacBook Pro\n- Mac Pro\n\nA product line is a grouping of products that are closely related in usage, functionality or marketing characteristics.\n\nA Product Family typically is created to address one or five functions:\n\n1. To increase profits and not erode the sales of existing products\n\n2. To attract additional Markets or Market Segments\n\n3. To counter competitor's products\n\n4. To fill a gap in an existing Product Family.\n\n5. To promote sales of other products in the family line\n\nLine Depth refers to the number of products in the product line.\n\nLine consistency refers to how closely related the products are that make up the product line.\n\nLine vulnerability refers to the percentage of sales or profits that are derived from only a few products in the product line.\n\nProduct width refers to the number of different product lines sold by a company.\n\nProduct mix refers to the total number of products sold in all product lines.\n\nLine extension refers to the adding of a new product to a line.\n\n\"Trading up or brand leveraging\" refers to adding a product of better quality to a product line than the other products in that line.\n\n\"Trading down\" refers to adding a product of lesser quality to a product line than the other products in that line.\n\nIf a line of products is sold with the same brand name, this is referred to as family branding.\nStrategy and decisions regarding a product line are usually incorporated in a high-level marketing plan addressing product line strategy, sales, channels, distribution channels, pricing and related issues.\nA product-line manager is responsible for a product line and supervises several product managers who are responsible for individual products within the line.\nProduct-line managers typically have the following responsibilities:\n- Expansion and composition of a product line\n- Evaluate the effects of product mixes on the profitability of other items in the line\n- Planning and allocation of resources to individual products in the line\nA product is normally associated with a brand strategy - manufacturer, private or generic.\n\n1. Manufacturer-  or 'national' branding in which the brand is assigned by the manufacturer of the Product.\n\n2. Private - or 'dealer' branding in which the brand is assigned by the retailer or wholesaler of the Product.\n\n3. Generic - in which the Product is not marked with any identification.   Generic brands are a means for manufacturers to increase profits by saving on advertising, packaging or other costs associated with manufacturer or private branding.\n\nA brand is name, term, sign, symbol or design or a combination of these which identify the goods or services and differentiate them from those of competitors'\n\nA Trade mark is a brand or some part of the brand that is given legal protection because it is capable of exclusive appropriation and representation.\n\nManufacturers can use their own brands (known as Manufacturers' brands) or brands of their distributors (Distributors' brands).\n\nManufacturers/ distributors use brand names for a variety of reasons ranging from simple identification purposes to having legal protection for unique features of the products from imitations.\n\nBrands help consumers recognize certain quality parameters. In some cases, brands are just used to endow the product with unique story and character which itself can be a basis for product differentiation.\n\nIndividual brands have their own identity and the corporate or common name is not used to promote its equity.\n\nIndividual branding requires more expensive advertising and brand extensive brand creation investments.  By extension, each new brand does not benefit from the positive perceptions of earlier brands.\n\nBy contrast, family branding has several advantages.\n\nEach new product is quickly associated with the other products and brand in terms of quality and benefits.\n\nReduced or eliminated time for name identification and advertising for name recognition purposes.",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "ProductId",
										"Description": "The unique identifier of a Product.",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct",
											"Name": "ProductId"
										}
									},
									{
										"Name": "ProductName",
										"Description": "The name of the Product, which normally corresponds to the 'marketing name' of the Product.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct",
											"Name": "ProductName"
										}
									},
									{
										"Name": "ProductModelName",
										"Description": "The name of the Product Model.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct",
											"Name": "ProductModelName"
										}
									},
									{
										"Name": "ProductCodeName",
										"Description": "The internal code name by which the Product is known within the company.",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 128,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct",
											"Name": "ProductCodeName"
										}
									},
									{
										"Name": "IntroductionDate",
										"Description": "The date that the Product was introduced for sale.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct",
											"Name": "IntroductionDate"
										}
									},
									{
										"Name": "PlannedAbandonmentDate",
										"Description": "The planned date to discontinue marketing the product.    \n\nAbandonment is a component in the decline stage of the product's life cycle characterized by a reduced market demand for the product and an increased number of competing products with similar characteristics.\n\nThere are three (3) strategies for abandoning a product:\n\n(1)  Reduced marketing and expenditures to maintain profits.\n\n(2)  Concentrating on the strongest market segments and eliminating the weaker market segments\n\n(3)  Maintain the marketing level until the product is discontinued.",
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"DateFormat": "YYYY-MM-DD",
												"HIVE_TYPE_STRING": "date"
											}
										},
										"BaseAttributeReference": {
											"Entity": "ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct",
											"Name": "PlannedAbandonmentDate"
										}
									},
									{
										"Name": "ProductColour",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "ProductCategory",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "DimProductETLDate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://model@piraeusdemosa.dfs.core.windows.net/SalesModel/DimProduct",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://model@piraeusdemosa.dfs.core.windows.net/SalesModel/DimProduct",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{\"ProductId\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductId\"},\"ProductName\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductName\"},\"ProductModelName\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductModelName\"},\"ProductCodeName\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductCodeName\"},\"IntroductionDate\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"IntroductionDate\"},\"PlannedAbandonmentDate\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"PlannedAbandonmentDate\"}}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"DerivedModelEntityInfo": "{\"entityDirectives\":{\"name\":\"DimProduct\",\"description\":\"A product is anything that can be offered to a market that might satisfy a want or need by potential customers.    That product is the sum of all physical, psychological, symbolic, and service attributes associated with it.\\n\\nThere are two basic types of products:\\n\\n- Tangible (physical)\\n- Intangible (non-physical) such as services\\n\\nA service is a non-material or intangible product - such as professional consultancy, maintenance service, repair service etc.\\nEach product has its own benefits, application, brand name, and packaging that gives it its own identity and distinguishing characteristics.\\n\\nEvery business or organization has business rules that define precisely what a product is.    While we intuitively know what a product is, we must quantify that knowledge and associated business rules with consistent definitions that can be implemented within the organization in strategies and applications.\\n\\nA product typically goes through five stages of development:\\n\\n(1) Idea Stage - involving a thorough evaluation of the potential product\\n\\n(2) Concept Stage - determines customer acceptance by testing and presentation to consumers and distribution channel members.   Specific aspects regarding quality, dependability, reliability, warranty, packaging, service, pricing, terms of sale, sales and distribution channels, advertising and promotions are evaluated.\\n\\n(3) Product Development Stage - transforms the prototype product into an actual product for mass sale.   This stage requires close interaction between both marketing and manufacturing.\\n\\n(4) Test Marketing Stage - may or may not be used since it is an expensive and time-consuming process.  Test marketing involves evaluating various product options and alternatives.\\n\\n(5) Commercialization - It is very expensive to launch a new product so commercialization only applies to those specific products that are actually going to be sold to the market.\\n\\nProducts tend to be categorized as either:  Industrial goods and consumer goods\\n\\nIndustrial goods are used to produce other products .\\n\\nIndustrial goods may be further divided into:\\n\\n- Raw materials\\n- Equipment\\n- Pre-built materials \\n- Supplies.\\n\\nConsumer goods are intended for consumption by the general public.\\n\\nConsumer goods may be further divided into:\\n\\n- Durable goods\\n- Nondurable goods\\n- Packaged goods\\n\\nA product may be a member of a product family or product line.\\n\\nA product family is a grouping of products or services that are related to each other by common function, functionality, design platform or similar characteristics.\\n\\nMembers of a product family frequently have many common parts and assemblies.\\n\\nProduct families are the highest level of grouping for forecasting, capacity planning or related functions.\\n\\nEx:\\nThe Apple Macintosh family of products consists of the product lines:\\n- Mac mini\\n- MacBook Pro\\n- Mac Pro\\n\\nA product line is a grouping of products that are closely related in usage, functionality or marketing characteristics.\\n\\nA Product Family typically is created to address one or five functions:\\n\\n1. To increase profits and not erode the sales of existing products\\n\\n2. To attract additional Markets or Market Segments\\n\\n3. To counter competitor's products\\n\\n4. To fill a gap in an existing Product Family.\\n\\n5. To promote sales of other products in the family line\\n\\nLine Depth refers to the number of products in the product line.\\n\\nLine consistency refers to how closely related the products are that make up the product line.\\n\\nLine vulnerability refers to the percentage of sales or profits that are derived from only a few products in the product line.\\n\\nProduct width refers to the number of different product lines sold by a company.\\n\\nProduct mix refers to the total number of products sold in all product lines.\\n\\nLine extension refers to the adding of a new product to a line.\\n\\n\\\"Trading up or brand leveraging\\\" refers to adding a product of better quality to a product line than the other products in that line.\\n\\n\\\"Trading down\\\" refers to adding a product of lesser quality to a product line than the other products in that line.\\n\\nIf a line of products is sold with the same brand name, this is referred to as family branding.\\nStrategy and decisions regarding a product line are usually incorporated in a high-level marketing plan addressing product line strategy, sales, channels, distribution channels, pricing and related issues.\\nA product-line manager is responsible for a product line and supervises several product managers who are responsible for individual products within the line.\\nProduct-line managers typically have the following responsibilities:\\n- Expansion and composition of a product line\\n- Evaluate the effects of product mixes on the profitability of other items in the line\\n- Planning and allocation of resources to individual products in the line\\nA product is normally associated with a brand strategy - manufacturer, private or generic.\\n\\n1. Manufacturer-  or 'national' branding in which the brand is assigned by the manufacturer of the Product.\\n\\n2. Private - or 'dealer' branding in which the brand is assigned by the retailer or wholesaler of the Product.\\n\\n3. Generic - in which the Product is not marked with any identification.   Generic brands are a means for manufacturers to increase profits by saving on advertising, packaging or other costs associated with manufacturer or private branding.\\n\\nA brand is name, term, sign, symbol or design or a combination of these which identify the goods or services and differentiate them from those of competitors'\\n\\nA Trade mark is a brand or some part of the brand that is given legal protection because it is capable of exclusive appropriation and representation.\\n\\nManufacturers can use their own brands (known as Manufacturers' brands) or brands of their distributors (Distributors' brands).\\n\\nManufacturers/ distributors use brand names for a variety of reasons ranging from simple identification purposes to having legal protection for unique features of the products from imitations.\\n\\nBrands help consumers recognize certain quality parameters. In some cases, brands are just used to endow the product with unique story and character which itself can be a basis for product differentiation.\\n\\nIndividual brands have their own identity and the corporate or common name is not used to promote its equity.\\n\\nIndividual branding requires more expensive advertising and brand extensive brand creation investments.  By extension, each new brand does not benefit from the positive perceptions of earlier brands.\\n\\nBy contrast, family branding has several advantages.\\n\\nEach new product is quickly associated with the other products and brand in terms of quality and benefits.\\n\\nReduced or eliminated time for name identification and advertising for name recognition purposes.\",\"baseEntityReference\":{\"name\":\"ConsumerGoodsProduct\",\"path\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\"},\"primaryKey\":[\"ProductId\"],\"projectionInfo\":{\"attributes\":[{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductId\"},\"dataType\":\"integer\",\"description\":\"The unique identifier of a Product.\",\"isNullable\":false,\"name\":\"ProductId\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductName\"},\"dataType\":\"string\",\"dataTypeLength\":128,\"description\":\"The name of the Product, which normally corresponds to the 'marketing name' of the Product.\",\"isNullable\":true,\"name\":\"ProductName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductModelName\"},\"dataType\":\"string\",\"dataTypeLength\":128,\"description\":\"The name of the Product Model.\",\"isNullable\":true,\"name\":\"ProductModelName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"ProductCodeName\"},\"dataType\":\"string\",\"dataTypeLength\":128,\"description\":\"The internal code name by which the Product is known within the company.\",\"isNullable\":true,\"name\":\"ProductCodeName\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"IntroductionDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The date that the Product was introduced for sale.\",\"isNullable\":true,\"name\":\"IntroductionDate\"},{\"type\":\"Existing\",\"attributeReference\":{\"entity\":\"ConsumerGoodsProduct.cdm.json/ConsumerGoodsProduct\",\"name\":\"PlannedAbandonmentDate\"},\"dataType\":\"date\",\"dateFormat\":\"YYYY-MM-DD\",\"description\":\"The planned date to discontinue marketing the product.    \\n\\nAbandonment is a component in the decline stage of the product's life cycle characterized by a reduced market demand for the product and an increased number of competing products with similar characteristics.\\n\\nThere are three (3) strategies for abandoning a product:\\n\\n(1)  Reduced marketing and expenditures to maintain profits.\\n\\n(2)  Concentrating on the strongest market segments and eliminating the weaker market segments\\n\\n(3)  Maintain the marketing level until the product is discontinued.\",\"isNullable\":true,\"name\":\"PlannedAbandonmentDate\"},{\"type\":\"New\",\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"\",\"isNullable\":false,\"name\":\"ProductColour\"},{\"type\":\"New\",\"dataType\":\"string\",\"dataTypeLength\":256,\"description\":\"\",\"isNullable\":false,\"name\":\"ProductCategory\"},{\"type\":\"New\",\"dataType\":\"timestamp\",\"description\":\"\",\"isNullable\":false,\"name\":\"DimProductETLDate\",\"timestampFormat\":\"YYYY-MM-DD HH:MM:SS.fffffffff\"}]}}}",
								"Description": "A product is anything that can be offered to a market that might satisfy a want or need by potential customers.    That product is the sum of all physical, psychological, symbolic, and service attributes associated with it.\n\nThere are two basic types of products:\n\n- Tangible (physical)\n- Intangible (non-physical) such as services\n\nA service is a non-material or intangible product - such as professional consultancy, maintenance service, repair service etc.\nEach product has its own benefits, application, brand name, and packaging that gives it its own identity and distinguishing characteristics.\n\nEvery business or organization has business rules that define precisely what a product is.    While we intuitively know what a product is, we must quantify that knowledge and associated business rules with consistent definitions that can be implemented within the organization in strategies and applications.\n\nA product typically goes through five stages of development:\n\n(1) Idea Stage - involving a thorough evaluation of the potential product\n\n(2) Concept Stage - determines customer acceptance by testing and presentation to consumers and distribution channel members.   Specific aspects regarding quality, dependability, reliability, warranty, packaging, service, pricing, terms of sale, sales and distribution channels, advertising and promotions are evaluated.\n\n(3) Product Development Stage - transforms the prototype product into an actual product for mass sale.   This stage requires close interaction between both marketing and manufacturing.\n\n(4) Test Marketing Stage - may or may not be used since it is an expensive and time-consuming process.  Test marketing involves evaluating various product options and alternatives.\n\n(5) Commercialization - It is very expensive to launch a new product so commercialization only applies to those specific products that are actually going to be sold to the market.\n\nProducts tend to be categorized as either:  Industrial goods and consumer goods\n\nIndustrial goods are used to produce other products .\n\nIndustrial goods may be further divided into:\n\n- Raw materials\n- Equipment\n- Pre-built materials \n- Supplies.\n\nConsumer goods are intended for consumption by the general public.\n\nConsumer goods may be further divided into:\n\n- Durable goods\n- Nondurable goods\n- Packaged goods\n\nA product may be a member of a product family or product line.\n\nA product family is a grouping of products or services that are related to each other by common function, functionality, design platform or similar characteristics.\n\nMembers of a product family frequently have many common parts and assemblies.\n\nProduct families are the highest level of grouping for forecasting, capacity planning or related functions.\n\nEx:\nThe Apple Macintosh family of products consists of the product lines:\n- Mac mini\n- MacBook Pro\n- Mac Pro\n\nA product line is a grouping of products that are closely related in usage, functionality or marketing characteristics.\n\nA Product Family typically is created to address one or five functions:\n\n1. To increase profits and not erode the sales of existing products\n\n2. To attract additional Markets or Market Segments\n\n3. To counter competitor's products\n\n4. To fill a gap in an existing Product Family.\n\n5. To promote sales of other products in the family line\n\nLine Depth refers to the number of products in the product line.\n\nLine consistency refers to how closely related the products are that make up the product line.\n\nLine vulnerability refers to the percentage of sales or profits that are derived from only a few products in the product line.\n\nProduct width refers to the number of different product lines sold by a company.\n\nProduct mix refers to the total number of products sold in all product lines.\n\nLine extension refers to the adding of a new product to a line.\n\n\"Trading up or brand leveraging\" refers to adding a product of better quality to a product line than the other products in that line.\n\n\"Trading down\" refers to adding a product of lesser quality to a product line than the other products in that line.\n\nIf a line of products is sold with the same brand name, this is referred to as family branding.\nStrategy and decisions regarding a product line are usually incorporated in a high-level marketing plan addressing product line strategy, sales, channels, distribution channels, pricing and related issues.\nA product-line manager is responsible for a product line and supervises several product managers who are responsible for individual products within the line.\nProduct-line managers typically have the following responsibilities:\n- Expansion and composition of a product line\n- Evaluate the effects of product mixes on the profitability of other items in the line\n- Planning and allocation of resources to individual products in the line\nA product is normally associated with a brand strategy - manufacturer, private or generic.\n\n1. Manufacturer-  or 'national' branding in which the brand is assigned by the manufacturer of the Product.\n\n2. Private - or 'dealer' branding in which the brand is assigned by the retailer or wholesaler of the Product.\n\n3. Generic - in which the Product is not marked with any identification.   Generic brands are a means for manufacturers to increase profits by saving on advertising, packaging or other costs associated with manufacturer or private branding.\n\nA brand is name, term, sign, symbol or design or a combination of these which identify the goods or services and differentiate them from those of competitors'\n\nA Trade mark is a brand or some part of the brand that is given legal protection because it is capable of exclusive appropriation and representation.\n\nManufacturers can use their own brands (known as Manufacturers' brands) or brands of their distributors (Distributors' brands).\n\nManufacturers/ distributors use brand names for a variety of reasons ranging from simple identification purposes to having legal protection for unique features of the products from imitations.\n\nBrands help consumers recognize certain quality parameters. In some cases, brands are just used to endow the product with unique story and character which itself can be a basis for product differentiation.\n\nIndividual brands have their own identity and the corporate or common name is not used to promote its equity.\n\nIndividual branding requires more expensive advertising and brand extensive brand creation investments.  By extension, each new brand does not benefit from the positive perceptions of earlier brands.\n\nBy contrast, family branding has several advantages.\n\nEach new product is quickly associated with the other products and brand in terms of quality and benefits.\n\nReduced or eliminated time for name identification and advertising for name recognition purposes.",
								"DisplayFolderInfo": "{\"name\":\"Product\",\"colorCode\":\"#0C614C\"}",
								"PrimaryKeys": "ProductId",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SalesModel"
							},
							"Name": "FactSales",
							"Description": "",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "id",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "OrderDateID",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "OrderShipDateID",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "DimCustomerID",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "DimProductID",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "Quantity",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "UnitPrice",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": false,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										}
									},
									{
										"Name": "UnitDiscount",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "decimal",
											"IsComplexType": false,
											"IsNullable": false,
											"Precision": 18,
											"Scale": 2,
											"Properties": {
												"HIVE_TYPE_STRING": "decimal"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://model@piraeusdemosa.dfs.core.windows.net/SalesModel/FactSales",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://model@piraeusdemosa.dfs.core.windows.net/SalesModel/FactSales",
									"Properties": {
										"LinkedServiceName": "piraeusdemo01-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "id",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SalesModel"
							},
							"Name": "relationship-osebdgfhpx",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "FactSales",
							"ToTableName": "DimProduct",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "DimProductID",
									"ToColumnName": "ProductId"
								}
							],
							"Properties": {}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Namespace": {
								"DatabaseName": "SalesModel"
							},
							"Name": "relationship-ztaqyzoazz",
							"EntityType": "RELATIONSHIP",
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "FactSales",
							"ToTableName": "DimCustomer",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "DimCustomerID",
									"ToColumnName": "CustomerID"
								}
							],
							"Properties": {}
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lakeprocessor')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 28,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.1",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}