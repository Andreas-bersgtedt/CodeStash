CREATE PROC [ME_Stage].[sp_ProcessLiveData] @DATASETID [INT] AS
BEGIN

/*GLOBALS*/
  DECLARE	@PARTITIONID	INT, 
			@STAGECOLS		VARCHAR(MAX), 
			@LIVECOLS		VARCHAR(MAX), 
			@BUSINESSKEY	VARCHAR(100), 
			@STAGETABLE		VARCHAR(1000), 
			@LIVETABLE		VARCHAR(1000), 
			@PARTITIONNAME	VARCHAR(255),
			@STAGESCHEMA	VARCHAR(200), 
			@LIVESCHEMA		VARCHAR(200),
			@HASDELTA		INT,
			@TABLE_ACTION	VARCHAR(10), 
			@TARGET_DIST	VARCHAR(1000)
--ENTITYROWIDENTIFIER
--ENTITYDELTACOLUMN
--ENTITYDELTAOPERATOR
--ENTITYDELTAVALUE
--598#
--TRUNCATE TABLE [ME_STAGE].[RAWPARTITIONSTAGE]
  --SELECT * FROM [ME_STAGE].[RAWPARTITIONSTAGE]
/*SET GLABAL VARIABLES*/
  SET @PARTITIONID = (SELECT TOP 1 ID 
					  FROM [ME_STAGE].[RAWPARTITIONSTAGE]
					  WHERE DATASETID=@DATASETID AND [STATUS] = 1
					  ORDER BY INSERTTIMESTAMP ASC
					  )
SET @PARTITIONNAME = (SELECT TOP 1 Partition_String 
					  FROM [ME_STAGE].[RAWPARTITIONSTAGE]
					  WHERE DATASETID=@DATASETID AND [STATUS] = 1
					  ORDER BY INSERTTIMESTAMP DESC)
SET @STAGESCHEMA	= (SELECT ATTRIBUTEVALUE FROM [ME_CONFIG].[GLOBALS] WHERE ATTRIBUTE ='STAGE_SCHEMA')
SET @LIVESCHEMA		= (SELECT TOP 1 C.CONNECTIONNAME +'_'+ D.SCHEMANAME FROM ME_CONFIG.CONNECTION C INNER JOIN ME_CONFIG.DATASET D ON C.ID=D.CONNECTIONID AND D.ID=@DATASETID)
SET @LIVETABLE		= (SELECT TOP 1 D.DATASETNAME FROM ME_CONFIG.CONNECTION C INNER JOIN ME_CONFIG.DATASET D ON C.ID=D.CONNECTIONID AND D.ID=@DATASETID)
SET @STAGETABLE		= (@LIVESCHEMA+'_'+@LIVETABLE)
SET @BUSINESSKEY	= (SELECT STRING_AGG('[' + [Value] + ']', ',') WITHIN GROUP (ORDER BY CreatedUTCTimestamp ASC) FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='EntityRowIdentifier')
SET @HASDELTA		= (SELECT COUNT(1) FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='ENTITYDELTACOLUMN')
SET @TARGET_DIST	= (SELECT [Value] FROM METADATA.ATTRIBUTE WHERE DATASETID=@DATASETID AND [Key]='ENTITY_MPP_DIST')

SET @TABLE_ACTION	= (SELECT CASE	WHEN @PARTITIONID IS NOT NULL THEN 
									CASE	WHEN @BUSINESSKEY IS NULL		AND @HASDELTA	<1	THEN 'D_CTAS' /*DROP AND RELOAD NO BUSINESS KEY AND NO DELTA CONFIG*/
											WHEN @BUSINESSKEY IS  NULL		AND @HASDELTA	>=1	THEN 'INSERT' /*INCREMENTAL INSERT ASSUME DELTA IS ACCURATE FROM SOURCE*/
											WHEN @BUSINESSKEY IS  NOT NULL	AND @HASDELTA	< 1	THEN 'BKISRT' /*INCREMENTAL INSERT FILTER WITH BUSINESS KEY*/
											WHEN @BUSINESSKEY IS NOT NULL	AND @HASDELTA	>=1 THEN 'U_CTAS' /*UPSERT USING CTAS AND RENAME OBJECT PROCESS*/
									END
						ELSE 'EXIT' END);

/*DYNAMIC SQL VARIABLES*/
DECLARE @LIVEINSERTSQL VARCHAR(MAX), @SCHEMASQL VARCHAR(MAX), @RENAMESQL VARCHAR(MAX)

/*BUILD COLUMN SCHEMA*/
SET @STAGECOLS = (SELECT STRING_AGG('[' + COLUMN_NAME + ']',',') WITHIN GROUP (ORDER BY ORDINAL_POSITION ASC) FROM INFORMATION_SCHEMA.COLUMNS	WHERE TABLE_NAME= @STAGETABLE AND TABLE_SCHEMA=@STAGESCHEMA)

						

/*BUILD DYNAMIC SQL*/

SET @SCHEMASQL = 'CREATE SCHEMA '+@LIVESCHEMA+' AUTHORIZATION dbo'

IF @TABLE_ACTION = 'D_CTAS' SET @LIVEINSERTSQL =REPLACE('IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'];
					
														CREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']
														WITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )
														AS
														SELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬) FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']'
														,'¬','''');

IF @TABLE_ACTION = 'INSERT' SET @LIVEINSERTSQL =REPLACE('IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) 
														
														CREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']
														WITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )
														AS
														SELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬ FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'];
														ELSE
														INSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'] ('+@STAGECOLS+',[RAW_SRC_PARTITION])
														SELECT '+@STAGECOLS+',RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬ FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']; 
														'
														,'¬','''');

IF @TABLE_ACTION = 'BKISRT' SET @LIVEINSERTSQL =REPLACE('IF NOT  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+']¬) AND type in (N¬U¬)) 
														
														CREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+']
														WITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )
														AS
														SELECT '+@STAGECOLS+'
																,RAW_SRC_PARTITION	= CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬
																,[BK_HASH_ID]		= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) 
														FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'];
														ELSE
														INSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'] ('+@STAGECOLS+',[RAW_SRC_PARTITION],[BK_HASH_ID])
														SELECT	'+@STAGECOLS+'
																,RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬
																,[BK_HASH_ID]		= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬)))  
														FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+']
														WHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) NOT IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']); 
														'
														,'¬','''');

IF @TABLE_ACTION = 'U_CTAS' SET @LIVEINSERTSQL =REPLACE('IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]¬) AND type in (N¬U¬)) DROP TABLE ¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]¬;
														
														/*UNSEEN RECORDS*/
														CREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]
														WITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )
														AS
														SELECT '+@STAGECOLS+'
																,RAW_SRC_PARTITION	= CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬
																,[BK_HASH_ID]		= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) 
																,[ME_ETL_ROW_DATE] = GETUTCDATE()
														FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'] 
														WHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) NOT IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']);

														/*UPDATED RECORDS*/
														INSERT INTO ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW] ('+@STAGECOLS+',[RAW_SRC_PARTITION],[BK_HASH_ID],[ME_ETL_ROW_DATE])
														SELECT	'+REPLACE(@STAGECOLS,'[','A.[')+'
																,RAW_SRC_PARTITION = CONVERT(VARCHAR(255),¬'+@PARTITIONNAME+'¬
																,[BK_HASH_ID]		= CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬)))
																,[ME_ETL_ROW_DATE] = GETUTCDATE()
														FROM ['+@STAGESCHEMA+'].['+@STAGETABLE+'] A
														WHERE CONVERT(BIGINT,HASHBYTES(¬SHA1¬,CONCAT('+@BUSINESSKEY+',¬#¬))) IN (SELECT [BK_HASH_ID] FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']); 

														BEGIN TRY DROP TABLE #'+@STAGETABLE+'  END TRY BEGIN CATCH PRINT 2 END CATCH;

														/*GET ALL UPSERT BUSINESS KEYS*/
														SELECT DISTINCT [BK_HASH_ID] INTO #'+@STAGETABLE+' FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]
														
														/*GENERATE FINAL SWITCH TABLE*/
														IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]¬) AND type in (N¬U¬)) DROP TABLE ¬['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]¬;
														CREATE TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH]
														WITH ( DISTRIBUTION = '+ISNULL(@TARGET_DIST,'ROUND_ROBIN')+', CLUSTERED COLUMNSTORE INDEX )
														AS
														SELECT *
														FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]
														UNION ALL
														SELECT *
														FROM ['+@LIVESCHEMA+'].['+@LIVETABLE+']
														WHERE [BK_HASH_ID] NOT IN (SELECT [BK_HASH_ID] FROM #'+@STAGETABLE+');

														/* CLEAN UP */
														BEGIN TRY DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_NEW]  END TRY BEGIN CATCH PRINT 3 END CATCH;
														BEGIN TRY DROP TABLE #'+@STAGETABLE+'  END TRY BEGIN CATCH PRINT 2 END CATCH;
														'
														,'¬','''');

IF @TABLE_ACTION != 'EXIT' AND @TABLE_ACTION = 'U_CTAS' SET @RENAMESQL = (
														REPLACE('/*SWITCH OUT*/
														RENAME OBJECT ['+@LIVESCHEMA+'].['+@LIVETABLE+'] TO ['+@LIVETABLE+'_TBD]
														RENAME OBJECT ['+@LIVESCHEMA+'].['+@LIVETABLE+'_SWITCH] TO ['+@LIVETABLE+']
														BEGIN TRY DROP TABLE ['+@LIVESCHEMA+'].['+@LIVETABLE+'_TBD]  END TRY BEGIN CATCH PRINT 4 END CATCH;
														','¬','''')
														);
														
SELECT @LIVESCHEMA,@LIVETABLE,@TARGET_DIST,@STAGECOLS,@PARTITIONNAME,@TABLE_ACTION

PRINT @SCHEMASQL
PRINT '-----------------------------------'
PRINT @LIVEINSERTSQL



BEGIN TRY 
IF @TABLE_ACTION != 'EXIT' EXEC (@SCHEMASQL)
END TRY
BEGIN CATCH
PRINT 'Target Schema Already Exists'
END CATCH

BEGIN TRY
IF @TABLE_ACTION != 'EXIT' EXEC (@LIVEINSERTSQL)


END TRY
BEGIN CATCH
	THROW 51000,  'INSERT FAILED', 1;  
END CATCH
IF @TABLE_ACTION != 'EXIT' EXEC (@RENAMESQL);
IF @TABLE_ACTION != 'EXIT' UPDATE	[ME_STAGE].[RAWPARTITIONSTAGE] SET [STATUS] = 2 WHERE ID =@PARTITIONID;



END